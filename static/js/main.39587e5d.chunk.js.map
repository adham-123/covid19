{"version":3,"sources":["redux/reducers/selectedCountry.js","Components/Header/DropDown.js","Components/InfoBox.js","redux/reducers/conRender.js","Components/Header/Header.js","redux/reducers/graphData.js","Components/LineGraph.js","Components/Slider.js","Components/Table.js","Components/DataLayout.js","Components/GoogleMap.js","Components/Map.js","Components/Footer.js","redux/reducers/countries.js","Images/earth.jpg","redux/reducers/worldwide.js","App.js","redux/configureStore.js","index.js"],"names":["selectedCountry","createSlice","name","initialState","country","reducers","changeSelectedCountry","state","action","payload","changeSelectedCountryTimeline","timeline","actions","clearInput","document","getElementById","value","fillInput","DropDown","dispatch","useDispatch","countries","useSelector","useEffect","className","type","size","id","list","placeholder","onChange","e","event","target","countryS","find","c","undefined","activeElement","blur","onFocus","onDoubleClick","onBlur","map","InfoBox","props","styling","padding","width","color","borderRadius","radius","backgroundColor","bcolor","boxShadow","shadow","margin","fontSize","active","activeColor","style","marginLeft","marginL","onClick","click","content","conRender","casesType","sortingType","dataShowing","graphSliderValue","graphSliderMaxValue","casesTypeCases","casesTypeRecovered","casesTypeDeaths","sortTable","sortType","showTodayData","dataShow","changeGraphSliderVal","changeGraphSliderMaxValue","Header","window","onscroll","header","wholeHeader","body","isMobile","pageYOffset","classList","remove","add","stickyFunction","border","cursor","outline","alt","src","flag","graphData","cases","deaths","recovered","displayedData","setgraphDataCountry","setgraphDataCases","emptyUpGraphDisplayData","changeGraphDisplayData","sliderValue","maxValue","slice","nf","Intl","NumberFormat","options","animation","duration","responsiveAnimationDuration","legend","display","elements","points","line","tension","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","format","hover","animationDuration","scales","xAxes","gridLines","time","tooltipFormat","yAxes","ticks","callback","index","values","LineGraph","graphCountry","graphCases","graphDeaths","graphRecovered","graphDisplayData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","a","fetch","then","response","json","message","fetchData","fetchAllData","setTimeout","length","borderColor","maxHeight","position","height","datasets","pointRadius","fill","hoverRadius","Slider","minWidth","min","max","step","Table","flexDirection","fontWeight","critical","tests","casePerPerson","deathPerPerson","testPerPerson","todayCases","todayRecovered","todayDeaths","nFormatter","num","symbol","formatIndex","findIndex","toFixed","DataLayout","borderBottom","borderTopRightRadius","borderTopLeftRadius","textAlign","verticalAlign","fontFamily","borderLeft","paddingLeft","paddingBottom","containerStyle","CircleComponent","setShowingInfoWindow","setCurrentCountry","currentZoom","onClose","casesOptions","strokeColor","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","zIndex","recoveredOptions","deathsOptions","selectedOptions","selectedType","center","Math","sqrt","onMouseOver","onMouseOut","Maps","useState","showingInfoWindow","currentCountry","setCurrentZoom","mapContainerStyle","zoom","onZoomChanged","this","getZoom","streetViewControl","mapTypeControl","maxZoom","minZoom","onCloseClick","React","memo","Map","href","rel","Footer","fetchCountries","createAsyncThunk","res","loading","pushToCountries","updateCountries","extraReducers","pending","fulfilled","countriesS","countryInfo","iso2","lat","lng","long","oneCasePerPeople","oneTestPerPeople","oneDeathPerPeople","rejected","fetchWorldwide","worldwide","pic","population","ErrorBoundary","hasError","error","errorInfo","children","Component","App","windowSize","setWindowSize","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","sorted","sortedData","sort","b","sortData","reducer","combineReducers","conrenderReducer","firstMiddleware","store","next","configureStore","middleware","getDefaultMiddleware","concat","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.39587e5d.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst selectedCountry = createSlice({\n  name: \"selectedCountry\",\n  initialState: {\n    country: {},\n  },\n  reducers: {\n    changeSelectedCountry: (state, action) => {\n      state.country = action.payload;\n    },\n    // changeSelectedCountryTimeline: (state, action) => {\n    //   state = {\n    //     ...state,\n    //     country: { ...state.country, timeline: [action.payload] },\n    //   };\n    // },\n    changeSelectedCountryTimeline: (state, action) => {\n      const { timeline } = action.payload;\n      state.country = { ...state.country, timeline: timeline };\n    },\n  },\n});\n\nexport const {\n  changeSelectedCountry,\n  changeSelectedCountryTimeline,\n} = selectedCountry.actions;\n\nexport default selectedCountry.reducer;\n","import React, { useEffect } from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeSelectedCountry } from \"../../redux/reducers/selectedCountry\";\n\nconst clearInput = () => {\n  document.getElementById(\"myInput\").value = null;\n};\nconst fillInput = (country) => {\n  document.getElementById(\"myInput\").value = country;\n};\n\nfunction DropDown() {\n  const dispatch = useDispatch();\n  const countries = useSelector((state) => state.countries.countries);\n  const selectedCountry = useSelector((state) => state.selectedCountry.country);\n\n  useEffect(() => {\n    fillInput(selectedCountry.name);\n  }, [selectedCountry]);\n\n  const onChange = (event) => {\n    const { value } = event.target;\n    let countryS = countries.find((c) => c.name === value);\n\n    if (countryS !== undefined) {\n      dispatch(changeSelectedCountry(countryS));\n      document.activeElement.blur();\n    }\n  };\n\n  return (\n    <div className=\"header__dropdown\">\n      <input\n        type=\"text\"\n        size=\"8\"\n        name=\"myInput\"\n        id=\"myInput\"\n        list=\"dropdown__countries\"\n        className=\"header__dropbtn\"\n        placeholder=\"Search Country\"\n        onChange={(e) => onChange(e)}\n        onFocus={() => clearInput()}\n        onDoubleClick={() => clearInput()}\n        onBlur={() => fillInput(selectedCountry.name)}\n      />\n      <datalist id=\"dropdown__countries\">\n        {countries.map((country) => (\n          <option key={country.value + country.name} value={country.name} />\n        ))}\n      </datalist>\n    </div>\n  );\n}\n\nexport default DropDown;\n","import React from \"react\";\n\nimport \".././Styling/infoBox.css\";\n\nfunction InfoBox(props) {\n  let styling = {\n    padding: props.padding,\n    width: props.width,\n    color: props.color,\n    borderRadius: props.radius,\n    backgroundColor: props.bcolor,\n    boxShadow: props.shadow,\n    margin: props.margin,\n    fontSize: props.fontSize,\n  };\n\n  if (props.active) {\n    styling = {\n      padding: props.padding,\n      width: props.width,\n      color: props.activeColor,\n      borderRadius: props.radius,\n      backgroundColor: props.bcolor,\n      margin: props.margin,\n      fontSize: props.fontSize,\n    };\n  }\n\n  return (\n    <div\n      className=\"infoBox\"\n      style={{ margin: props.margin, marginLeft: props.marginL }}\n    >\n      <button\n        className=\"infoBox__button\"\n        onClick={props.click}\n        style={styling}\n        onFocus={props.onFocus}\n      >\n        <span>\n          <p>{props.content}</p>\n        </span>\n      </button>\n    </div>\n  );\n}\n\nexport default InfoBox;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst conRender = createSlice({\n  name: \"conRender\",\n  initialState: {\n    casesType: \"cases\",\n    sortingType: \"\",\n    dataShowing: \"all\",\n    graphSliderValue: 200,\n    graphSliderMaxValue: 300,\n  },\n  reducers: {\n    casesTypeCases: (state) => {\n      state.casesType = \"cases\";\n    },\n    casesTypeRecovered: (state) => {\n      state.casesType = \"recovered\";\n    },\n    casesTypeDeaths: (state) => {\n      state.casesType = \"deaths\";\n    },\n    sortTable: (state, action) => {\n      const { sortType } = action.payload;\n      state.sortingType = sortType;\n    },\n    showTodayData: (state, action) => {\n      const { dataShow } = action.payload;\n      state.dataShowing = dataShow;\n    },\n    changeGraphSliderVal: (state, action) => {\n      const { value } = action.payload;\n      state.graphSliderValue = value;\n    },\n    changeGraphSliderMaxValue: (state, action) => {\n      state.graphSliderMaxValue = action.payload.value;\n    },\n  },\n});\n\nexport const {\n  casesTypeCases,\n  casesTypeRecovered,\n  casesTypeDeaths,\n  sortTable,\n  showTodayData,\n  changeGraphSliderVal,\n  changeGraphSliderMaxValue,\n} = conRender.actions;\n\nexport default conRender.reducer;\n","import React from \"react\";\n\nimport DropDown from \"./DropDown\";\nimport InfoBox from \"../../Components/InfoBox\";\n\nimport \"../../Styling/header.css\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  casesTypeCases,\n  casesTypeDeaths,\n  casesTypeRecovered,\n  changeGraphSliderVal,\n  showTodayData,\n} from \"../../redux/reducers/conRender\";\nimport { changeSelectedCountry } from \"../../redux/reducers/selectedCountry\";\n\nfunction Header(props) {\n  const dispatch = useDispatch();\n  const casesType = useSelector((state) => state.conRender.casesType);\n  const countries = useSelector((state) => state.countries.countries);\n  const selectedCountry = useSelector((state) => state.selectedCountry.country);\n  const c = countries.find((c) => c.name === \"WorldWide\");\n\n  const stickyFunction = () => {\n    var header = document.getElementById(\"myHeader\");\n    var wholeHeader = document.getElementById(\"header\");\n    var body = document.getElementById(\"bodyExtension\");\n    // var sticky = header.offsetTop;\n\n    if (props.isMobile.width < 710) {\n      if (window.pageYOffset < 50) {\n        header.classList.remove(\"sticky\");\n        body.classList.remove(\"bodyExtension\");\n      } else {\n        header.classList.add(\"sticky\");\n        body.classList.add(\"bodyExtension\");\n      }\n    } else {\n      wholeHeader.classList.add(\"headerSticky\");\n    }\n  };\n\n  window.onscroll = () => {\n    stickyFunction();\n  };\n\n  return (\n    <div className=\"header\">\n      <button\n        className=\"header__title\"\n        onClick={() => (\n          dispatch(casesTypeCases()),\n          dispatch(showTodayData({ dataShow: \"all\" })),\n          dispatch(changeGraphSliderVal({ value: 200 })),\n          // dispatch(sortTable({ sortType: \"\" })),\n          c !== undefined ? dispatch(changeSelectedCountry(c)) : null\n        )}\n        style={{\n          border: \"0px\",\n          backgroundColor: \"rgba(230, 230, 230,1)\",\n          cursor: \"pointer\",\n          outline: \"none\",\n        }}\n      >\n        Covid 19 Tracker\n      </button>\n\n      <img\n        alt={`${selectedCountry.name} Flag`}\n        src={selectedCountry.flag}\n        className=\"header_image\"\n      />\n\n      <div className=\"header__dd_img\" id=\"myHeader\">\n        <div className=\"header__right\">\n          <DropDown />\n        </div>\n\n        <div className=\"header__infoBox\">\n          <InfoBox\n            content=\"Cases\"\n            active={casesType === \"cases\"}\n            click={() => dispatch(casesTypeCases())}\n            padding={props.isMobile.width < 365 ? \"3px\" : \"10px\"}\n            activeColor=\"rgb(225, 0, 0)\"\n            margin=\"1px\"\n            fontSize={props.isMobile.width < 420 ? \"12px\" : \"15px\"}\n          />\n          <InfoBox\n            content=\"Recovered\"\n            active={casesType === \"recovered\"}\n            click={() => dispatch(casesTypeRecovered())}\n            padding={props.isMobile.width < 365 ? \"3px\" : \"10px\"}\n            activeColor=\"rgb(70, 250, 70)\"\n            margin=\"1px\"\n            fontSize={props.isMobile.width < 420 ? \"12px\" : \"15px\"}\n          />\n          <InfoBox\n            content=\"Deaths\"\n            active={casesType === \"deaths\"}\n            click={() => dispatch(casesTypeDeaths())}\n            padding={props.isMobile.width < 365 ? \"3px\" : \"10px\"}\n            activeColor=\"rgb(50, 50, 50)\"\n            margin=\"1px\"\n            fontSize={props.isMobile.width < 420 ? \"12px\" : \"15px\"}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst graphData = createSlice({\n  name: \"graphData\",\n  initialState: {\n    country: \"\",\n    cases: [],\n    deaths: [],\n    recovered: [],\n    displayedData: [],\n  },\n\n  reducers: {\n    setgraphDataCountry: (state, action) => {\n      state.country = action.payload;\n    },\n    setgraphDataCases: (state, action) => {\n      const { cases, recovered, deaths } = action.payload;\n      state.cases = cases;\n      state.recovered = recovered;\n      state.deaths = deaths;\n    },\n    emptyUpGraphDisplayData: (state, action) => {\n      state.displayedData = [];\n    },\n    changeGraphDisplayData: (state, action) => {\n      const { sliderValue, type, maxValue } = action.payload;\n      type === \"cases\"\n        ? (state.displayedData = state.cases.slice(sliderValue, maxValue))\n        : type === \"recovered\"\n        ? (state.displayedData = state.recovered.slice(sliderValue, maxValue))\n        : (state.displayedData = state.deaths.slice(sliderValue, maxValue));\n    },\n  },\n});\n\nexport const {\n  setgraphDataCountry,\n  setgraphDataCases,\n  emptyUpGraphDisplayData,\n  changeGraphDisplayData,\n} = graphData.actions;\n\nexport default graphData.reducer;\n","import React, { useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  changeGraphSliderMaxValue,\n  changeGraphSliderVal,\n} from \"../redux/reducers/conRender\";\nimport {\n  setgraphDataCountry,\n  setgraphDataCases,\n  emptyUpGraphDisplayData,\n  changeGraphDisplayData,\n} from \"../redux/reducers/graphData\";\n\nconst nf = new Intl.NumberFormat();\n\nconst options = {\n  animation: {\n    duration: 0,\n  },\n  responsiveAnimationDuration: 0,\n  legend: {\n    display: true,\n  },\n  elements: {\n    points: {\n      radius: 0,\n    },\n    line: {\n      tension: 0.4, // disables bezier curves\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return nf.format(tooltipItem.value);\n      },\n    },\n  },\n  hover: {\n    mode: \"index\",\n    intersect: true,\n    animationDuration: 0,\n  },\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          display: true,\n        },\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: true,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return nf.format(value);\n          },\n        },\n      },\n    ],\n  },\n};\n\nfunction LineGraph() {\n  const dispatch = useDispatch();\n  const country = useSelector((state) => state.selectedCountry.country);\n\n  const graphCountry = useSelector((state) => state.graphData.country);\n  const graphCases = useSelector((state) => state.graphData.cases);\n  const graphDeaths = useSelector((state) => state.graphData.deaths);\n  const graphRecovered = useSelector((state) => state.graphData.recovered);\n  const graphDisplayData = useSelector(\n    (state) => state.graphData.displayedData\n  );\n\n  const graphSliderValue = useSelector(\n    (state) => state.conRender.graphSliderValue\n  );\n  const graphSliderMaxValue = useSelector(\n    (state) => state.conRender.graphSliderMaxValue\n  );\n\n  const casesType = useSelector((state) => state.conRender.casesType);\n\n  const buildChartData = (data) => {\n    let chartData = [];\n    let lastDataPoint;\n    if (data !== undefined) {\n      for (let date in data) {\n        if (lastDataPoint) {\n          let newDataPoint = {\n            x: date,\n            y: data[date] - lastDataPoint < 0 ? 0 : data[date] - lastDataPoint,\n          };\n          chartData.push(newDataPoint);\n        }\n\n        lastDataPoint = data[date] < 0 ? 0 : data[date];\n      }\n      return chartData;\n    }\n  };\n\n  useEffect(() => {\n    if (country.name !== \"WorldWide\" && country.name !== undefined) {\n      const fetchData = async () => {\n        await fetch(\n          `https://disease.sh/v3/covid-19/historical/${country.name}?lastdays=all`\n        )\n          .then((response) => response.json())\n          .then((data) => {\n            if (\n              data.message ===\n              \"Country not found or doesn't have any historical data\"\n            ) {\n              return null;\n            }\n\n            dispatch(setgraphDataCountry(data.country));\n\n            dispatch(\n              setgraphDataCases({\n                cases: buildChartData(data.timeline.cases),\n                recovered: buildChartData(data.timeline.recovered),\n                deaths: buildChartData(data.timeline.deaths),\n              })\n            );\n\n            dispatch(changeGraphSliderVal({ value: 150 }));\n          });\n      };\n      fetchData();\n    } else {\n      const fetchAllData = async () => {\n        await fetch(\n          `https://disease.sh/v3/covid-19/historical/all?lastdays=all`\n        )\n          .then((response) => response.json())\n          .then((data) => {\n            data.country = \"WorldWide\";\n\n            dispatch(setgraphDataCountry(data.country));\n\n            dispatch(\n              setgraphDataCases({\n                cases: buildChartData(data.cases),\n                recovered: buildChartData(data.recovered),\n                deaths: buildChartData(data.deaths),\n              })\n            );\n\n            dispatch(changeGraphSliderVal({ value: 200 }));\n          });\n      };\n      fetchAllData();\n    }\n  }, [country.name]);\n\n  useEffect(() => {\n    let sliderValue = graphSliderMaxValue - graphSliderValue;\n    setTimeout(function () {\n      dispatch(\n        changeGraphDisplayData({\n          sliderValue: sliderValue,\n          type: casesType,\n          maxValue: graphSliderMaxValue,\n        })\n      );\n    });\n  }, [graphSliderValue]);\n\n  //Slider useEffect to so the data showing the value user set on the slider\n  useEffect(() => {\n    if (graphDisplayData) {\n      graphCountry === \"WorldWide\"\n        ? dispatch(changeGraphSliderVal({ value: 200 }))\n        : dispatch(changeGraphSliderVal({ value: 150 }));\n\n      let maxValue =\n        casesType === \"cases\"\n          ? graphCases.length\n          : casesType === \"recovered\"\n          ? graphRecovered.length\n          : graphDeaths.length;\n      dispatch(\n        changeGraphSliderMaxValue({\n          value: maxValue,\n        })\n      );\n\n      dispatch(emptyUpGraphDisplayData({ type: \"\" }));\n      let sliderValue = graphSliderMaxValue - graphSliderValue;\n      setTimeout(function () {\n        dispatch(\n          changeGraphDisplayData({\n            sliderValue: sliderValue,\n            type: casesType,\n            maxValue: graphSliderMaxValue,\n          })\n        );\n      });\n    }\n  }, [graphCases, graphRecovered, graphDeaths, graphCountry, casesType]);\n\n  const color =\n    casesType === \"cases\"\n      ? \"rgba(200, 20, 50, 0.5)\"\n      : casesType === \"recovered\"\n      ? \"rgba(0, 200, 50, 0.5)\"\n      : \"rgba(100, 100, 100, 0.5)\";\n\n  const borderColor =\n    casesType === \"cases\"\n      ? \"rgb(200, 20, 50)\"\n      : casesType === \"recovered\"\n      ? \"rgb(0, 200, 50)\"\n      : \"rgb(100, 100, 100)\";\n\n  if (graphCountry !== country.name) {\n    return (\n      <div>\n        <p>Loading...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      style={{\n        maxHeight: \"100%\",\n        position: \"relative\",\n        height: \"100%\",\n        width: \"100%\",\n      }}\n    >\n      {/* <div className=\"linegraph__graphbuttons\">\n        <h2 style={{ color: borderColor }}>{cName}</h2>\n        <InfoBox\n          content=\"Total\"\n          margin=\"0px\"\n          marginL=\"5px\"\n          bcolor={borderColor}\n          shadow={` 0 6px ${color}`}\n          click={() => setDaily(false)}\n          activeColor=\"rgb(255, 255, 255)\"\n          active={daily === false}\n          color=\"rgb(0, 0, 0)\"\n        />\n        <InfoBox\n          content=\"Daily\"\n          margin=\"0px\"\n          marginL=\"5px\"\n          bcolor={borderColor}\n          shadow={` 0 6px ${color}`}\n          click={() => setDaily(true)}\n          activeColor=\"rgb(255, 255, 255)\"\n          active={daily === true}\n          color=\"rgb(0, 0, 0)\"\n        />\n      </div> */}\n\n      <Line\n        options={options}\n        data={{\n          datasets: [\n            {\n              backgroundColor: color,\n              borderColor: borderColor,\n              data: graphDisplayData.length > 1 ? graphDisplayData : null,\n              pointRadius: 1,\n              fill: true,\n              label: graphCountry + \" \" + casesType,\n              hoverRadius: 5,\n            },\n            // {\n            //   backgroundColor: \"rgba(25, 0, 255, 0.7)\",\n            //   borderColor: \"rgb(25, 0, 255)\",\n            //   data: total,\n            //   pointRadius: 1,\n            //   fill: false,\n            //   label: \"Total\",\n            //   hoverRadius: 5,\n            // },\n          ],\n        }}\n      />\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React from \"react\";\n\nimport \"../Styling/slider.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { changeGraphSliderVal } from \"../redux/reducers/conRender\";\n\nfunction Slider(props) {\n  const dispatch = useDispatch();\n  const graphSliderValue = useSelector(\n    (state) => state.conRender.graphSliderValue\n  );\n  const graphSliderMaxValue = useSelector(\n    (state) => state.conRender.graphSliderMaxValue\n  );\n\n  return (\n    <div className=\"slidecontainer\">\n      <p style={{ minWidth: \"110px\" }}>Past {graphSliderValue} Days:</p>\n      <input\n        type=\"range\"\n        min=\"10\"\n        max={graphSliderMaxValue}\n        step=\"1\"\n        value={graphSliderValue}\n        onChange={(e) =>\n          dispatch(changeGraphSliderVal({ value: e.target.value }))\n        }\n        className=\"slider\"\n      />\n    </div>\n  );\n}\n\nexport default Slider;\n","import React from \"react\";\n\nimport \"../Styling/table.css\";\nimport InfoBox from \"./InfoBox\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { showTodayData, sortTable } from \"../redux/reducers/conRender\";\n\nconst nf = new Intl.NumberFormat();\n\nfunction Table() {\n  const dispatch = useDispatch();\n  const sortingType = useSelector((state) => state.conRender.sortingType);\n  const dataShowing = useSelector((state) => state.conRender.dataShowing);\n  const countries = useSelector((state) => state.countries.countries);\n\n  // useEffect(() => {\n  //   return function scrollTable() {\n  //     var elem = document.getElementById(props.country.name);\n  //     elem.scrollIntoView(true);\n  //   };\n  // }, [props.country]);\n\n  // click = () => {\n  //   this.scr.scrollIntoView();\n  // }\n\n  // const handleButtonClick = (scrol) => {\n  //   document.getElementById(scrol).scrollIntoView({\n  //     behavior: \"smooth\",\n  //     block: \"start\",\n  //     inline: \"nearest\",\n  //   });\n  // };\n\n  // var rows = document.querySelectorAll(props.country.name);\n\n  // // line is zero-based\n  // // line is the row number that you want to see into view after scroll\n  // rows[9].scrollIntoView({\n  //   behavior: \"smooth\",\n  //   block: \"center\",\n  // });\n\n  return (\n    <div className=\"table\">\n      <span\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          fontSize: \"13px\",\n        }}\n      >\n        <InfoBox\n          content=\"All\"\n          click={() => dispatch(showTodayData({ dataShow: \"all\" }))}\n          onFocus={() => dispatch(sortTable({ sortType: \"\" }))}\n          width=\"50px\"\n          margin=\"0px\"\n          active={dataShowing === \"all\"}\n          color=\"rgb(40, 40, 40)\"\n          activeColor=\"rgb(250, 250, 250)\"\n        />\n        <InfoBox\n          content=\"Today\"\n          click={() => dispatch(showTodayData({ dataShow: \"today\" }))}\n          onFocus={() => dispatch(sortTable({ sortType: \"\" }))}\n          width=\"60px\"\n          margin=\"0px\"\n          active={dataShowing === \"today\"}\n          color=\"rgb(40, 40, 40)\"\n          activeColor=\"rgb(250, 250, 250)\"\n        />\n      </span>\n\n      <div className=\"table__data\">\n        <table>\n          <thead>\n            <tr>\n              <th\n                onClick={() => dispatch(sortTable({ sortType: \"countries\" }))}\n              >\n                {sortingType === \"countries\" ? (\n                  <p>Country ▾</p>\n                ) : (\n                  <span>Country</span>\n                )}\n              </th>\n              <th\n                onClick={\n                  dataShowing === \"all\"\n                    ? () => dispatch(sortTable({ sortType: \"cases\" }))\n                    : () => dispatch(sortTable({ sortType: \"todayCases\" }))\n                }\n              >\n                {dataShowing === \"today\" ? (\n                  <p style={{ fontSize: \"10px\", fontWeight: \"lighter\" }}>\n                    Today\n                  </p>\n                ) : null}\n                {sortingType === \"cases\" || sortingType === \"todayCases\" ? (\n                  <p>Cases ▾</p>\n                ) : (\n                  <span>Cases</span>\n                )}\n              </th>\n              <th\n                onClick={\n                  dataShowing === \"all\"\n                    ? () => dispatch(sortTable({ sortType: \"recovered\" }))\n                    : () => dispatch(sortTable({ sortType: \"todayRecovered\" }))\n                }\n              >\n                {dataShowing === \"today\" ? (\n                  <p style={{ fontSize: \"10px\", fontWeight: \"lighter\" }}>\n                    Today\n                  </p>\n                ) : null}\n                {sortingType === \"recovered\" ||\n                sortingType === \"todayRecovered\" ? (\n                  <p>Recovered ▾</p>\n                ) : (\n                  <span>Recovered</span>\n                )}\n              </th>\n              <th\n                onClick={\n                  dataShowing === \"all\"\n                    ? () => dispatch(sortTable({ sortType: \"deaths\" }))\n                    : () => dispatch(sortTable({ sortType: \"todayDeaths\" }))\n                }\n              >\n                {dataShowing === \"today\" ? (\n                  <p style={{ fontSize: \"10px\", fontWeight: \"lighter\" }}>\n                    Today\n                  </p>\n                ) : null}\n                {sortingType === \"deaths\" || sortingType === \"todayDeaths\" ? (\n                  <p>Deaths ▾</p>\n                ) : (\n                  <span>Deaths</span>\n                )}\n              </th>\n              <th onClick={() => dispatch(sortTable({ sortType: \"active\" }))}>\n                {sortingType === \"active\" ? (\n                  <p>Active ▾</p>\n                ) : (\n                  <span>Active</span>\n                )}\n              </th>\n              <th>Critical</th>\n              <th>Tests</th>\n              <th>Case/Person</th>\n              <th>Death/Person</th>\n              <th>Test/Person</th>\n            </tr>\n          </thead>\n          <tbody>\n            {countries.map((country, index) =>\n              dataShowing === \"all\" ? (\n                <tr key={index} id={country.name}>\n                  <td>{country.name}</td>\n                  <td>{nf.format(country.cases)}</td>\n                  <td>{nf.format(country.recovered)}</td>\n                  <td>{nf.format(country.deaths)}</td>\n                  <td>{nf.format(country.active)}</td>\n                  <td>{nf.format(country.critical)}</td>\n                  <td>{nf.format(country.tests)}</td>\n                  <td>{nf.format(country.casePerPerson)}</td>\n                  <td>{nf.format(country.deathPerPerson)}</td>\n                  <td>{nf.format(country.testPerPerson)}</td>\n                </tr>\n              ) : (\n                <tr key={index} id={country.name}>\n                  <td>{country.name}</td>\n                  <td>{nf.format(country.todayCases)}</td>\n                  <td>{nf.format(country.todayRecovered)}</td>\n                  <td>{nf.format(country.todayDeaths)}</td>\n                  <td>{nf.format(country.active)}</td>\n                  <td>{nf.format(country.critical)}</td>\n                  <td>{nf.format(country.tests)}</td>\n                  <td>{nf.format(country.casePerPerson)}</td>\n                  <td>{nf.format(country.deathPerPerson)}</td>\n                  <td>{nf.format(country.testPerPerson)}</td>\n                </tr>\n              )\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\n\nimport \"../Styling/dataLayout.css\";\nimport Table from \"../Components/Table.js\";\n// import PieChart from \"./PieChart\";\n\nimport { useSelector } from \"react-redux\";\n\nconst nf = new Intl.NumberFormat();\n\nfunction nFormatter(num) {\n  const format = [\n    { value: 1e18, symbol: \"E\" },\n    { value: 1e15, symbol: \"P\" },\n    { value: 1e12, symbol: \"T\" },\n    { value: 1e9, symbol: \"B\" },\n    { value: 1e6, symbol: \"M\" },\n    { value: 1e3, symbol: \"k\" },\n    { value: 1, symbol: \"\" },\n  ];\n  const formatIndex = format.findIndex((data) => num >= data.value);\n  return (\n    (num / format[formatIndex === -1 ? 6 : formatIndex].value).toFixed(2) +\n    format[formatIndex === -1 ? 6 : formatIndex].symbol\n  );\n}\n\nfunction DataLayout() {\n  const selectedCountry = useSelector((state) => state.selectedCountry.country);\n  return (\n    <div className=\"dataLayout\">\n      <div className=\"datalayout__overview\">\n        <div\n          style={{\n            borderBottom: \"1px solid gray\",\n            width: \"100%\",\n            display: \"table\",\n          }}\n        >\n          <p\n            style={{\n              padding: \"10px\",\n              backgroundColor: \"rgb(255, 255, 255)\",\n              borderTopRightRadius: \"9px\",\n              borderTopLeftRadius: \"9px\",\n              boxShadow:\n                \"inset 100px 0px 100px -50px rgb(170, 170, 170), inset -100px 0px 100px -50px rgb(170, 170, 170)\",\n              textAlign: \"center\",\n              verticalAlign: \"middle\",\n            }}\n          >\n            <b style={{ fontSize: \"22px\", fontFamily: \"cursive\" }}>\n              {selectedCountry.name}\n            </b>\n            Overview\n          </p>\n        </div>\n        <div className=\"datalayout__overview_in\">\n          <div\n            className=\"datalayout__overview_box\"\n            style={{ borderLeft: \"hidden\" }}\n          >\n            <p className=\"datalayout__overview_title\">\n              Cases <br />\n              <span className=\"datalayout__overview_boldnumber\">\n                {nFormatter(selectedCountry.cases)}\n              </span>\n              <br />\n              <span className=\"datalayout__overview_dailynumber\">\n                + {nf.format(selectedCountry.todayCases)}\n              </span>\n            </p>\n          </div>\n          <div className=\"datalayout__overview_box\">\n            <p className=\"datalayout__overview_title\">\n              Recovered <br />\n              <span className=\"datalayout__overview_boldnumber\">\n                {nFormatter(selectedCountry.recovered)}\n              </span>{\" \"}\n              <br />\n              <span className=\"datalayout__overview_dailynumber\">\n                + {nf.format(selectedCountry.todayRecovered)}\n              </span>\n            </p>\n          </div>\n          <div className=\"datalayout__overview_box\">\n            <p className=\"datalayout__overview_title\">\n              Deaths <br />\n              <span className=\"datalayout__overview_boldnumber\">\n                {nFormatter(selectedCountry.deaths)}\n              </span>{\" \"}\n              <br />\n              <span className=\"datalayout__overview_dailynumber\">\n                + {nf.format(selectedCountry.todayDeaths)}\n              </span>\n            </p>\n          </div>\n        </div>\n        <div className=\"datalayout__overview_in\">\n          <div\n            className=\"datalayout__overview_box\"\n            style={{ borderLeft: \"hidden\" }}\n          >\n            <p className=\"datalayout__overview_title\">\n              Active <br />{\" \"}\n              <span className=\"datalayout__overview_number\">\n                {nFormatter(selectedCountry.active)}\n              </span>\n            </p>\n          </div>\n          <div className=\"datalayout__overview_box\">\n            <p className=\"datalayout__overview_title\">\n              Critical <br />{\" \"}\n              <span className=\"datalayout__overview_number\">\n                {nFormatter(selectedCountry.critical)}\n              </span>\n            </p>\n          </div>\n          <div className=\"datalayout__overview_box\">\n            <p className=\"datalayout__overview_title\">\n              Tests <br />{\" \"}\n              <span className=\"datalayout__overview_number\">\n                {nFormatter(selectedCountry.tests)}\n              </span>\n            </p>\n          </div>\n        </div>\n        <div className=\"datalayout__overview_in\">\n          <div\n            className=\"datalayout__overview_box\"\n            style={{ borderLeft: \"hidden\" }}\n          >\n            <p className=\"datalayout__overview_title\">\n              Case/Person <br />{\" \"}\n              <span className=\"datalayout__overview_number\">\n                {nFormatter(selectedCountry.casePerPerson)}\n              </span>\n            </p>\n          </div>\n          <div className=\"datalayout__overview_box\">\n            <p className=\"datalayout__overview_title\">\n              Test/Person <br />\n              <span className=\"datalayout__overview_number\">\n                {nFormatter(selectedCountry.testPerPerson)}\n              </span>\n            </p>\n          </div>\n          <div className=\"datalayout__overview_box\">\n            <p className=\"datalayout__overview_title\">\n              Deaths/Person <br />{\" \"}\n              <span className=\"datalayout__overview_number\">\n                {nFormatter(selectedCountry.deathPerPerson)}\n              </span>\n            </p>\n          </div>\n        </div>\n        <p\n          style={{ paddingLeft: \"8px\", paddingBottom: \"2px\", fontSize: \"10px\" }}\n        >\n          <b>Case/Person</b> = <b>X</b> (Every <b>X</b> people there's one Case\n          )\n        </p>\n      </div>\n      <div className=\"datalayout__table\">\n        <Table />\n      </div>\n      {/* <div className=\"datalayout__graph_pie\">\n        <PieChart countries={countries} casesType={casesType} />\n      </div> */}\n    </div>\n  );\n}\n\nexport default DataLayout;\n","import React, { useState } from \"react\";\nimport {\n  GoogleMap,\n  LoadScript,\n  Circle,\n  InfoWindow,\n} from \"@react-google-maps/api\";\n\nconst containerStyle = {\n  width: \"100%\",\n  height: \"100%\",\n};\n\nfunction CircleComponent({\n  setShowingInfoWindow,\n  setCurrentCountry,\n  country,\n  currentZoom,\n  casesType,\n  onClose,\n}) {\n  if (country.name === \"WorldWide\") {\n    return null;\n  }\n\n  const options = {\n    casesOptions: {\n      strokeColor: \"rgba(255, 0, 0)\",\n      strokeWeight: 0.5,\n      fillColor: \"rgba(255, 0, 0)\",\n      fillOpacity: 0.35,\n      clickable: true,\n      draggable: false,\n      editable: false,\n      visible: true,\n      zIndex: 1,\n    },\n    recoveredOptions: {\n      strokeColor: \"rgba(0, 255, 150)\",\n      strokeWeight: 1.5,\n      fillColor: \"rgba(0, 255, 0)\",\n      fillOpacity: 0.35,\n      clickable: true,\n      draggable: false,\n      editable: false,\n      visible: true,\n      zIndex: 1,\n    },\n    deathsOptions: {\n      strokeColor: \"rgba(20, 20, 20)\",\n      strokeWeight: 1.5,\n      fillColor: \"rgba(0, 0, 0)\",\n      fillOpacity: 0.35,\n      clickable: true,\n      draggable: false,\n      editable: false,\n      visible: true,\n      zIndex: 1,\n    },\n  };\n\n  const onCircleClick = () => {\n    setCurrentCountry(country);\n    setShowingInfoWindow(true);\n  };\n\n  const selectedOptions =\n    casesType === \"cases\"\n      ? options.casesOptions\n      : casesType === \"deaths\"\n      ? options.deathsOptions\n      : options.recoveredOptions;\n\n  const selectedType =\n    casesType === \"cases\"\n      ? country.cases\n      : casesType === \"recovered\"\n      ? country.recovered\n      : country.deaths;\n\n  return (\n    <Circle\n      center={country.center}\n      options={selectedOptions}\n      radius={(Math.sqrt(selectedType) * 600) / currentZoom}\n      onMouseOver={onCircleClick}\n      onMouseOut={onClose}\n      clickable\n    />\n  );\n}\n\nfunction Maps(props) {\n  const [showingInfoWindow, setShowingInfoWindow] = useState(false);\n  const [currentCountry, setCurrentCountry] = useState(props.country);\n  const [currentZoom, setCurrentZoom] = useState();\n\n  function handleZoomChanged() {\n    setCurrentZoom(this.getZoom() + 1);\n  }\n\n  const onClose = () => {\n    showingInfoWindow && setShowingInfoWindow(false);\n  };\n\n  const nf = new Intl.NumberFormat();\n\n  return (\n    //googleMapsApiKey=\"AIzaSyA0qwEl7BqF71zcbmOvKq67ZgmPJNB47AM\"\n    <LoadScript>\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={props.country.center}\n        zoom={props.country.zoom}\n        onZoomChanged={handleZoomChanged}\n        options={{\n          // gestureHandling: \"greedy\",\n          streetViewControl: false,\n          mapTypeControl: false,\n          maxZoom: 6,\n          minZoom: 1,\n        }}\n      >\n        <>\n          {props.countries.map((country, index) => (\n            <CircleComponent\n              setShowingInfoWindow={setShowingInfoWindow}\n              setCurrentCountry={setCurrentCountry}\n              country={country}\n              showingInfoWindow={showingInfoWindow}\n              currentZoom={currentZoom}\n              casesType={props.casesType}\n              onClose={onClose}\n              key={index}\n            />\n          ))}\n\n          {showingInfoWindow && (\n            <InfoWindow position={currentCountry.center} onCloseClick={onClose}>\n              <div>\n                <span>\n                  <img\n                    alt={`${currentCountry.name} Flag`}\n                    src={currentCountry.flag}\n                    className=\"map_image\"\n                  />\n                </span>\n                <br />\n                <span>{`${currentCountry.name}`}</span>\n                <br />\n                <span>{`Cases: ${nf.format(currentCountry.cases)}`}</span>\n                <br />\n                <span>{`Recovered: ${nf.format(\n                  currentCountry.recovered\n                )}`}</span>\n                <br />\n                <span>{`Deaths: ${nf.format(currentCountry.deaths)}`}</span>\n              </div>\n            </InfoWindow>\n          )}\n        </>\n      </GoogleMap>\n    </LoadScript>\n  );\n}\n\nexport default React.memo(Maps);\n","import React from \"react\";\n\nimport Maps from \"./GoogleMap.js\";\n\nimport { useSelector } from \"react-redux\";\n\nfunction Map() {\n  const countries = useSelector((state) => state.countries.countries);\n  const selectedCountry = useSelector((state) => state.selectedCountry.country);\n  const casesType = useSelector((state) => state.conRender.casesType);\n\n  const color =\n    casesType === \"cases\"\n      ? \"rgba(200, 20, 50, 0.5)\"\n      : casesType === \"recovered\"\n      ? \"rgba(0, 200, 50, 0.5)\"\n      : \"rgba(100, 100, 100, 0.5)\";\n\n  return (\n    <div style={{ position: \"relative\", height: \"100%\", width: \"100%\" }}>\n      <div\n        style={{\n          padding: \"3px\",\n          // borderBottom: \"1px solid rgb(180, 180, 180)\",\n        }}\n      >\n        <p style={{ display: \"inline\" }}>Map of </p>\n        <h3 style={{ display: \"inline\", color: color }}>{casesType}</h3>\n      </div>\n      <div style={{ position: \"relative\", height: \"250px\", width: \"100%\" }}>\n        <Maps\n          countries={countries}\n          country={selectedCountry}\n          casesType={casesType}\n        />\n      </div>\n\n      <div>\n        <p\n          style={{\n            fontSize: \"13px\",\n            color: \"gray\",\n            paddingLeft: \"10px\",\n            display: \"inline\",\n            position: \"relative\",\n            height: \"100%\",\n          }}\n        >\n          Source:\n        </p>\n        <a\n          href=\"https://www.worldometers.info/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={{ color: \"gray\", display: \"inline\", fontSize: \"10px\" }}\n        >\n          Worldometer\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\n\nimport \"../Styling/Footer.css\";\n\nfunction Footer() {\n  return (\n    <div className=\"footer\">\n      <p>\n        Contact me:{\" \"}\n        <a href=\"mailto: adham@adhamnasr.com\">adham@adhamnasr.com</a>\n      </p>\n      <p style={{ fontSize: \"11px\" }}>Copyright&copy; 2020</p>\n    </div>\n  );\n}\n\nexport default Footer;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nexport const fetchCountries = createAsyncThunk(\n  \"countries/fetchCountries\",\n  async () => {\n    const res = await fetch(\n      \"https://disease.sh/v3/covid-19/countries?yesterday=true\"\n    );\n    return res.json();\n  }\n);\n\nconst countries = createSlice({\n  name: \"countries\",\n  initialState: {\n    loading: null,\n    countries: [],\n  },\n  reducers: {\n    pushToCountries: (state, action) => {\n      state.countries.push(action.payload);\n    },\n    updateCountries: (state, action) => {\n      state.countries = action.payload;\n    },\n  },\n  extraReducers: {\n    [fetchCountries.pending]: (state) => {\n      state.loading = true;\n    },\n    [fetchCountries.fulfilled]: (state, action) => {\n      state.loading = false;\n      const countriesS = action.payload.map((country) => ({\n        name: country.country,\n        value: country.countryInfo.iso2,\n        cases: country.cases,\n        todayCases: country.todayCases,\n        recovered: country.recovered,\n        todayRecovered: country.todayRecovered,\n        deaths: country.deaths,\n        todayDeaths: country.todayDeaths,\n        flag: country.countryInfo.flag,\n        center: {\n          lat: country.countryInfo.lat,\n          lng: country.countryInfo.long,\n        },\n        zoom: 4,\n        active: country.active,\n        critical: country.critical,\n        tests: country.tests,\n        casePerPerson: country.oneCasePerPeople,\n        testPerPerson: country.oneTestPerPeople,\n        deathPerPerson: country.oneDeathPerPeople,\n        timeline: null,\n        // todayUpdated: 0,\n      }));\n      state.countries = countriesS;\n    },\n    [fetchCountries.rejected]: (state) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport const { pushToCountries, updateCountries } = countries.actions;\n\nexport default countries.reducer;\n","export default __webpack_public_path__ + \"static/media/earth.f22c010c.jpg\";","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nimport pic from \"../../Images/earth.jpg\";\n\nexport const fetchWorldwide = createAsyncThunk(\n  \"worldwide/fetchworldwide\",\n  async () => {\n    const res = await fetch(\n      \"https://disease.sh/v3/covid-19/all?yesterday=true\"\n    );\n    return res.json();\n  }\n);\n\nconst worldwide = createSlice({\n  name: \"worldwide\",\n  initialState: {\n    loading: null,\n    worldwide: [],\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchWorldwide.pending]: (state) => {\n      state.loading = true;\n    },\n\n    [fetchWorldwide.fulfilled]: (state, action) => {\n      state.loading = false;\n      const worldwide = action.payload;\n      worldwide.name = \"WorldWide\";\n      worldwide.flag = pic;\n      worldwide.center = {\n        lat: 0,\n        lng: 0,\n      };\n      worldwide.zoom = 1;\n      worldwide.casePerPerson =\n        action.payload.population / action.payload.cases;\n      worldwide.testPerPerson =\n        action.payload.population / action.payload.tests;\n      worldwide.deathPerPerson =\n        action.payload.population / action.payload.deaths;\n      worldwide.timeline = null;\n      state.worldwide = worldwide;\n    },\n\n    [fetchWorldwide.rejected]: (state) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport default worldwide.reducer;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./Styling/App.css\";\n\nimport Header from \"./Components/Header/Header.js\";\nimport LineGraph from \"./Components/LineGraph\";\nimport Slider from \"./Components/Slider.js\";\nimport DataLayout from \"./Components/DataLayout\";\nimport Map from \"./Components/Map\";\nimport Footer from \"./Components/Footer\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport {\n  fetchCountries,\n  pushToCountries,\n  updateCountries,\n} from \"./redux/reducers/countries\";\nimport { fetchWorldwide } from \"./redux/reducers/worldwide\";\nimport { changeSelectedCountry } from \"./redux/reducers/selectedCountry\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    // logErrorToMyService(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nfunction App() {\n  const sortType = useSelector((state) => state.conRender.sortingType);\n  const worldwide = useSelector((state) => state.worldwide.worldwide);\n  const countries = useSelector((state) => state.countries.countries);\n\n  const dispatch = useDispatch();\n\n  const isMobile = useWindowSize();\n\n  function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n      width: undefined,\n      height: undefined,\n    });\n\n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n\n    return windowSize;\n  }\n\n  useEffect(() => {\n    const sortData = (data) => {\n      const sortedData = [...data];\n\n      return sortType === \"cases\"\n        ? sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1))\n        : sortType === \"deaths\"\n        ? sortedData.sort((a, b) => (a.deaths > b.deaths ? -1 : 1))\n        : sortType === \"recovered\"\n        ? sortedData.sort((a, b) => (a.recovered > b.recovered ? -1 : 1))\n        : sortType === \"todayCases\"\n        ? sortedData.sort((a, b) => (a.todayCases > b.todayCases ? -1 : 1))\n        : sortType === \"todayDeaths\"\n        ? sortedData.sort((a, b) => (a.todayDeaths > b.todayDeaths ? -1 : 1))\n        : sortType === \"todayRecovered\"\n        ? sortedData.sort((a, b) =>\n            a.todayRecovered > b.todayRecovered ? -1 : 1\n          )\n        : sortType === \"active\"\n        ? sortedData.sort((a, b) => (a.active > b.active ? -1 : 1))\n        : sortType === \"countries\"\n        ? sortedData.sort((a, b) => (a.name < b.name ? -1 : 1))\n        : sortedData.sort((a, b) => (a > b ? -1 : 1));\n    };\n    const sorted = sortData(countries);\n    dispatch(updateCountries(sorted));\n  }, [sortType]);\n\n  useEffect(() => {\n    return dispatch(fetchCountries()), dispatch(fetchWorldwide());\n  }, []);\n\n  useEffect(() => {\n    return dispatch(\n      pushToCountries(worldwide),\n      dispatch(changeSelectedCountry(worldwide))\n    );\n  }, [worldwide]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__header\" id=\"header\">\n        <ErrorBoundary>\n          <Header isMobile={isMobile} />\n        </ErrorBoundary>\n      </div>\n      <div className=\"app__body\" id=\"bodyExtension\">\n        <div className=\"app__dataLayout\">\n          <ErrorBoundary>\n            <DataLayout />\n          </ErrorBoundary>\n        </div>\n        <div className=\"app__map_wrapper\">\n          <ErrorBoundary>\n            <Map />\n          </ErrorBoundary>\n        </div>\n        <div className=\"app__graph\">\n          <div className=\"app__graph_graph\">\n            <ErrorBoundary>\n              <LineGraph />\n            </ErrorBoundary>\n          </div>\n          <ErrorBoundary>\n            <Slider />\n          </ErrorBoundary>\n        </div>\n      </div>\n      <div className=\"app__footer\">\n        <ErrorBoundary>\n          <Footer />\n        </ErrorBoundary>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport conrenderReducer from \"./reducers/conRender\";\nimport countries from \"./reducers/countries\";\nimport logger from \"redux-logger\";\nimport worldwide from \"./reducers/worldwide\";\nimport selectedCountry from \"./reducers/selectedCountry\";\nimport graphData from \"./reducers/graphData\";\n\nconst reducer = combineReducers({\n  conRender: conrenderReducer,\n  countries: countries,\n  worldwide: worldwide,\n  selectedCountry: selectedCountry,\n  graphData: graphData,\n});\n\nconst firstMiddleware = (store) => (next) => (action) => {\n  return next(action);\n};\n\nconst middleware = (getDefaultMiddleware) =>\n  getDefaultMiddleware().concat(firstMiddleware);\n\nconst store = configureStore({\n  reducer,\n  middleware,\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport store from \"./redux/configureStore\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// After user zoom out, if different country selected from dropdown, map doesn't zoom back to it. Check the setZoom on country change\n// When a country is selected table scrolls to that country and highlights raw\n// Check out why the map circles load twice when deaths selected. Maybe cuz \"cases\" is set to default\n\n// total button not centered on apple\n"],"sourceRoot":""}