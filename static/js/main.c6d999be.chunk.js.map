{"version":3,"sources":["Components/Header/DropDown.js","Components/InfoBox.js","redux/ducks/conRender.js","Components/Header/Header.js","Components/LineGraph.js","Images/earth.jpg","Components/Slider.js","Components/Table.js","Components/PieChart.js","Components/DataLayout.js","Components/GoogleMap.js","Components/Map.js","Components/Footer.js","App.js","redux/configureStore.js","index.js"],"names":["clearInput","document","getElementById","value","fillInput","country","DropDown","props","useEffect","name","className","type","size","id","list","placeholder","onChange","changeCountry","onFocus","onDoubleClick","onBlur","countries","map","InfoBox","styling","padding","width","color","borderRadius","radius","backgroundColor","bcolor","boxShadow","shadow","margin","fontSize","active","activeColor","style","marginLeft","marginL","onClick","click","content","conRender","createSlice","initialState","casesType","sortingType","dataShowing","graphSliderValue","graphSliderMaxValue","reducers","casesTypeCases","state","casesTypeRecovered","casesTypeDeaths","sortTable","action","sortType","payload","showTodayData","dataShow","changeGraphSliderVal","changeGraphSliderMaxValue","actions","Header","dispatch","useDispatch","useSelector","c","find","undefined","setCountry","border","cursor","outline","alt","src","flag","isMobile","window","onscroll","header","wholeHeader","body","offsetTop","pageYOffset","classList","remove","add","stickyFunction","nf","Intl","NumberFormat","options","animation","duration","hover","animationDuration","responsiveAnimationDuration","legend","display","elements","points","line","tension","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","format","xAxes","gridLines","time","tooltipFormat","yAxes","ticks","callback","index","values","LineGraph","useState","chartData","setChartData","dataTotal","setDataTotal","daily","cName","setCName","setTotal","buildChartData","lastDataPoint","cases","date","newDataPoint","x","y","push","buildChartTotal","a","fetch","then","response","json","message","timeline","fetchData","fetchAllData","length","sliderValue","slice","borderColor","maxHeight","position","height","datasets","pointRadius","fill","hoverRadius","Slider","minWidth","min","max","step","e","target","Table","flexDirection","fontWeight","recovered","deaths","critical","tests","casePerPerson","deathPerPerson","testPerPerson","todayCases","todayRecovered","todayDeaths","PieChart","nFormatter","num","symbol","formatIndex","findIndex","toFixed","DataLayout","borderBottom","borderTopRightRadius","borderTopLeftRadius","textAlign","verticalAlign","fontFamily","borderLeft","paddingLeft","paddingBottom","containerStyle","CircleComponent","setShowingInfoWindow","setCurrentCountry","currentZoom","onClose","casesOptions","strokeColor","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","zIndex","recoveredOptions","deathsOptions","selectedOptions","selectedType","center","Math","sqrt","onMouseOver","onMouseOut","Maps","showingInfoWindow","currentCountry","setCurrentZoom","mapContainerStyle","zoom","onZoomChanged","this","getZoom","streetViewControl","mapTypeControl","maxZoom","minZoom","onCloseClick","React","memo","Map","href","rel","Footer","App","setCountries","windowSize","setWindowSize","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","sorted","sortedData","sort","b","sortData","worldwide","pic","lat","lng","population","concat","selectedCountry","countriesS","countryInfo","iso2","long","oneCasePerPeople","oneTestPerPeople","oneDeathPerPeople","event","countryS","activeElement","blur","reducer","combineReducers","conrenderReducer","store","configureStore","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c6d999be.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nconst clearInput = () => {\r\n  document.getElementById(\"myInput\").value = null;\r\n};\r\nconst fillInput = (country) => {\r\n  document.getElementById(\"myInput\").value = country;\r\n};\r\n\r\nfunction DropDown(props) {\r\n  useEffect(() => {\r\n    fillInput(props.country.name);\r\n  }, [props.country]);\r\n\r\n  return (\r\n    <div className=\"header__dropdown\">\r\n      <input\r\n        type=\"text\"\r\n        size=\"8\"\r\n        name=\"myInput\"\r\n        id=\"myInput\"\r\n        list=\"dropdown__countries\"\r\n        className=\"header__dropbtn\"\r\n        placeholder=\"Search Country\"\r\n        onChange={props.changeCountry}\r\n        onFocus={() => clearInput()}\r\n        onDoubleClick={() => clearInput()}\r\n        onBlur={() => fillInput(props.country.name)}\r\n      />\r\n      <datalist id=\"dropdown__countries\">\r\n        {props.countries.map((country) => (\r\n          <option key={country.value + country.name} value={country.name} />\r\n        ))}\r\n      </datalist>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropDown;\r\n","import React from \"react\";\r\n\r\nimport \".././Styling/infoBox.css\";\r\n\r\nfunction InfoBox(props) {\r\n  let styling = {\r\n    padding: props.padding,\r\n    width: props.width,\r\n    color: props.color,\r\n    borderRadius: props.radius,\r\n    backgroundColor: props.bcolor,\r\n    boxShadow: props.shadow,\r\n    margin: props.margin,\r\n    fontSize: props.fontSize,\r\n  };\r\n\r\n  if (props.active) {\r\n    styling = {\r\n      padding: props.padding,\r\n      width: props.width,\r\n      color: props.activeColor,\r\n      borderRadius: props.radius,\r\n      backgroundColor: props.bcolor,\r\n      margin: props.margin,\r\n      fontSize: props.fontSize,\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"infoBox\"\r\n      style={{ margin: props.margin, marginLeft: props.marginL }}\r\n    >\r\n      <button\r\n        className=\"infoBox__button\"\r\n        onClick={props.click}\r\n        style={styling}\r\n        onFocus={props.onFocus}\r\n      >\r\n        <span>\r\n          <p>{props.content}</p>\r\n        </span>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst conRender = createSlice({\r\n  name: \"conRender\",\r\n  initialState: {\r\n    casesType: \"cases\",\r\n    sortingType: \"\",\r\n    dataShowing: \"all\",\r\n    graphSliderValue: 200,\r\n    graphSliderMaxValue: 300,\r\n  },\r\n  reducers: {\r\n    casesTypeCases: (state) => {\r\n      state.casesType = \"cases\";\r\n    },\r\n    casesTypeRecovered: (state) => {\r\n      state.casesType = \"recovered\";\r\n    },\r\n    casesTypeDeaths: (state) => {\r\n      state.casesType = \"deaths\";\r\n    },\r\n    sortTable: (state, action) => {\r\n      const { sortType } = action.payload;\r\n      state.sortingType = sortType;\r\n    },\r\n    showTodayData: (state, action) => {\r\n      const { dataShow } = action.payload;\r\n      state.dataShowing = dataShow;\r\n    },\r\n    changeGraphSliderVal: (state, action) => {\r\n      const { value } = action.payload;\r\n      state.graphSliderValue = value;\r\n    },\r\n    changeGraphSliderMaxValue: (state, action) => {\r\n      state.graphSliderMaxValue = action.payload.value;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  casesTypeCases,\r\n  casesTypeRecovered,\r\n  casesTypeDeaths,\r\n  sortTable,\r\n  showTodayData,\r\n  changeGraphSliderVal,\r\n  changeGraphSliderMaxValue,\r\n} = conRender.actions;\r\n\r\nexport default conRender.reducer;\r\n","import React from \"react\";\r\n\r\nimport DropDown from \"./DropDown\";\r\nimport InfoBox from \"../../Components/InfoBox\";\r\n\r\nimport \"../../Styling/header.css\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  casesTypeCases,\r\n  casesTypeDeaths,\r\n  casesTypeRecovered,\r\n  changeGraphSliderVal,\r\n  showTodayData,\r\n  sortTable,\r\n} from \"../../redux/ducks/conRender\";\r\n\r\nfunction Header(props) {\r\n  const dispatch = useDispatch();\r\n  const casesType = useSelector((state) => state.conRender.casesType);\r\n  const c = props.countries.find((c) => c.name === \"WorldWide\");\r\n\r\n  const stickyFunction = () => {\r\n    var header = document.getElementById(\"myHeader\");\r\n    var wholeHeader = document.getElementById(\"header\");\r\n    var body = document.getElementById(\"bodyExtension\");\r\n    var sticky = header.offsetTop;\r\n\r\n    if (props.isMobile.width < 710) {\r\n      if (window.pageYOffset < 50) {\r\n        header.classList.remove(\"sticky\");\r\n        body.classList.remove(\"bodyExtension\");\r\n      } else {\r\n        header.classList.add(\"sticky\");\r\n        body.classList.add(\"bodyExtension\");\r\n      }\r\n    } else {\r\n      wholeHeader.classList.add(\"headerSticky\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <button\r\n        className=\"header__title\"\r\n        onClick={() => (\r\n          dispatch(casesTypeCases()),\r\n          dispatch(showTodayData({ dataShow: \"all\" })),\r\n          dispatch(changeGraphSliderVal({ value: 200 })),\r\n          // dispatch(sortTable({ sortType: \"\" })),\r\n          c !== undefined ? props.setCountry(c) : null\r\n        )}\r\n        style={{\r\n          border: \"0px\",\r\n          backgroundColor: \"rgba(230, 230, 230,1)\",\r\n          cursor: \"pointer\",\r\n          outline: \"none\",\r\n        }}\r\n      >\r\n        Covid 19 Tracker\r\n      </button>\r\n\r\n      <img\r\n        alt={`${props.country.name} Flag`}\r\n        src={props.country.flag}\r\n        className=\"header_image\"\r\n      />\r\n\r\n      <div className=\"header__dd_img\" id=\"myHeader\">\r\n        <div className=\"header__right\">\r\n          <DropDown\r\n            countries={props.countries}\r\n            changeCountry={props.changeCountry}\r\n            country={props.country}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"header__infoBox\">\r\n          <InfoBox\r\n            content=\"Cases\"\r\n            active={casesType === \"cases\"}\r\n            click={() => dispatch(casesTypeCases())}\r\n            padding={props.isMobile.width < 365 ? \"3px\" : \"10px\"}\r\n            activeColor=\"rgb(225, 0, 0)\"\r\n            margin=\"1px\"\r\n            fontSize={props.isMobile.width < 420 ? \"12px\" : \"15px\"}\r\n          />\r\n          <InfoBox\r\n            content=\"Recovered\"\r\n            active={casesType === \"recovered\"}\r\n            click={() => dispatch(casesTypeRecovered())}\r\n            padding={props.isMobile.width < 365 ? \"3px\" : \"10px\"}\r\n            activeColor=\"rgb(70, 250, 70)\"\r\n            margin=\"1px\"\r\n            fontSize={props.isMobile.width < 420 ? \"12px\" : \"15px\"}\r\n          />\r\n          <InfoBox\r\n            content=\"Deaths\"\r\n            active={casesType === \"deaths\"}\r\n            click={() => dispatch(casesTypeDeaths())}\r\n            padding={props.isMobile.width < 365 ? \"3px\" : \"10px\"}\r\n            activeColor=\"rgb(50, 50, 50)\"\r\n            margin=\"1px\"\r\n            fontSize={props.isMobile.width < 420 ? \"12px\" : \"15px\"}\r\n          />\r\n        </div>\r\n      </div>\r\n      {\r\n        (window.onscroll = () => {\r\n          stickyFunction();\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nimport InfoBox from \"./InfoBox\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  changeGraphSliderMaxValue,\r\n  changeGraphSliderVal,\r\n} from \"../redux/ducks/conRender\";\r\n\r\nconst nf = new Intl.NumberFormat();\r\n\r\nconst options = {\r\n  animation: {\r\n    duration: 0,\r\n  },\r\n  hover: {\r\n    animationDuration: 0,\r\n  },\r\n  responsiveAnimationDuration: 0,\r\n  legend: {\r\n    display: true,\r\n  },\r\n  elements: {\r\n    points: {\r\n      radius: 0,\r\n    },\r\n    line: {\r\n      tension: 0.4, // disables bezier curves\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return nf.format(tooltipItem.value);\r\n      },\r\n    },\r\n  },\r\n  hover: {\r\n    mode: \"index\",\r\n    intersect: true,\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        gridLines: {\r\n          display: true,\r\n        },\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: true,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return nf.format(value);\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nfunction LineGraph({ country, ...props }) {\r\n  const dispatch = useDispatch();\r\n  const graphSliderValue = useSelector(\r\n    (state) => state.conRender.graphSliderValue\r\n  );\r\n  const [chartData, setChartData] = useState([]);\r\n  const [dataTotal, setDataTotal] = useState([]);\r\n  const [daily, setDaily] = useState(true);\r\n  const [cName, setCName] = useState(\"Loading...\");\r\n  const [total, setTotal] = useState({});\r\n  const casesType = useSelector((state) => state.conRender.casesType);\r\n\r\n  const buildChartData = (data, casesType = \"cases\") => {\r\n    if (data) {\r\n      let chartData = [];\r\n      let lastDataPoint;\r\n      if (data.cases !== undefined) {\r\n        for (let date in data.cases) {\r\n          if (lastDataPoint && daily) {\r\n            let newDataPoint = {\r\n              x: date,\r\n              y:\r\n                data[casesType][date] - lastDataPoint < 0\r\n                  ? 0\r\n                  : data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n          }\r\n          if (lastDataPoint && daily === false) {\r\n            let newDataPoint = {\r\n              x: date,\r\n              y: data[casesType][date] < 0 ? 0 : data[casesType][date],\r\n            };\r\n            chartData.push(newDataPoint);\r\n          }\r\n\r\n          lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n      }\r\n    }\r\n  };\r\n\r\n  const buildChartTotal = (data, casesType = \"cases\") => {\r\n    if (data) {\r\n      let chartData = [];\r\n      let lastDataPoint;\r\n      if (data.cases !== undefined) {\r\n        for (let date in data.cases) {\r\n          if (lastDataPoint) {\r\n            let newDataPoint = {\r\n              x: date,\r\n              y: data[casesType][date] < 0 ? 0 : data[casesType][date],\r\n            };\r\n            chartData.push(newDataPoint);\r\n          }\r\n          lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (country.name !== \"WorldWide\" && country.name !== undefined) {\r\n      const fetchData = async () => {\r\n        await fetch(\r\n          `https://disease.sh/v3/covid-19/historical/${country.name}?lastdays=all`\r\n        )\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            if (\r\n              data.message ===\r\n              \"Country not found or doesn't have any historical data\"\r\n            ) {\r\n              return null;\r\n            }\r\n\r\n            setChartData(buildChartData(data.timeline, casesType));\r\n            setDataTotal(buildChartTotal(data.timeline, casesType));\r\n            if (chartData) setCName(data.country);\r\n            dispatch(changeGraphSliderVal({ value: 150 }));\r\n          });\r\n      };\r\n      fetchData();\r\n    } else {\r\n      const fetchAllData = async () => {\r\n        await fetch(\r\n          `https://disease.sh/v3/covid-19/historical/all?lastdays=all`\r\n        )\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            data.country = \"WorldWide\";\r\n            setCName(data.country);\r\n\r\n            setChartData(buildChartData(data, casesType));\r\n            setDataTotal(buildChartTotal(data, casesType));\r\n            dispatch(changeGraphSliderVal({ value: 200 }));\r\n          });\r\n      };\r\n      fetchAllData();\r\n    }\r\n  }, [country.name, daily, casesType]);\r\n\r\n  //Slider useEffect to so the data showing the value user set on the slider\r\n  useEffect(() => {\r\n    if (chartData && dataTotal) {\r\n      dispatch(changeGraphSliderMaxValue({ value: chartData.length }));\r\n      let sliderValue = chartData.length - graphSliderValue;\r\n      let c = chartData.slice(sliderValue, chartData.length);\r\n      props.setCountry({ ...country, timeline: c });\r\n      setTotal(dataTotal.slice(sliderValue, dataTotal.length));\r\n    }\r\n  }, [graphSliderValue, chartData, dataTotal]);\r\n\r\n  const color =\r\n    casesType === \"cases\"\r\n      ? \"rgba(200, 20, 50, 0.5)\"\r\n      : casesType === \"recovered\"\r\n      ? \"rgba(0, 200, 50, 0.5)\"\r\n      : \"rgba(100, 100, 100, 0.5)\";\r\n\r\n  const borderColor =\r\n    casesType === \"cases\"\r\n      ? \"rgb(200, 20, 50)\"\r\n      : casesType === \"recovered\"\r\n      ? \"rgb(0, 200, 50)\"\r\n      : \"rgb(100, 100, 100)\";\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        maxHeight: \"100%\",\r\n        position: \"relative\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      {/* <div className=\"linegraph__graphbuttons\">\r\n        <h2 style={{ color: borderColor }}>{cName}</h2>\r\n        <InfoBox\r\n          content=\"Total\"\r\n          margin=\"0px\"\r\n          marginL=\"5px\"\r\n          bcolor={borderColor}\r\n          shadow={` 0 6px ${color}`}\r\n          click={() => setDaily(false)}\r\n          activeColor=\"rgb(255, 255, 255)\"\r\n          active={daily === false}\r\n          color=\"rgb(0, 0, 0)\"\r\n        />\r\n        <InfoBox\r\n          content=\"Daily\"\r\n          margin=\"0px\"\r\n          marginL=\"5px\"\r\n          bcolor={borderColor}\r\n          shadow={` 0 6px ${color}`}\r\n          click={() => setDaily(true)}\r\n          activeColor=\"rgb(255, 255, 255)\"\r\n          active={daily === true}\r\n          color=\"rgb(0, 0, 0)\"\r\n        />\r\n      </div> */}\r\n\r\n      {country.timeline?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: color,\r\n                borderColor: borderColor,\r\n                data: country.timeline,\r\n                pointRadius: 1,\r\n                fill: true,\r\n                label: cName + \" \" + casesType,\r\n                hoverRadius: 5,\r\n              },\r\n              // {\r\n              //   backgroundColor: \"rgba(25, 0, 255, 0.7)\",\r\n              //   borderColor: \"rgb(25, 0, 255)\",\r\n              //   data: total,\r\n              //   pointRadius: 1,\r\n              //   fill: false,\r\n              //   label: \"Total\",\r\n              //   hoverRadius: 5,\r\n              // },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","export default __webpack_public_path__ + \"static/media/earth.f22c010c.jpg\";","import React from \"react\";\r\n\r\nimport \"../Styling/slider.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { changeGraphSliderVal } from \"../redux/ducks/conRender\";\r\n\r\nfunction Slider(props) {\r\n  const dispatch = useDispatch();\r\n  const graphSliderValue = useSelector(\r\n    (state) => state.conRender.graphSliderValue\r\n  );\r\n  const graphSliderMaxValue = useSelector(\r\n    (state) => state.conRender.graphSliderMaxValue\r\n  );\r\n\r\n  return (\r\n    <div className=\"slidecontainer\">\r\n      <p style={{ minWidth: \"110px\" }}>Past {graphSliderValue} Days:</p>\r\n      <input\r\n        type=\"range\"\r\n        min=\"10\"\r\n        max={graphSliderMaxValue}\r\n        step=\"1\"\r\n        value={graphSliderValue}\r\n        onChange={(e) =>\r\n          dispatch(changeGraphSliderVal({ value: e.target.value }))\r\n        }\r\n        className=\"slider\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Slider;\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"../Styling/table.css\";\r\nimport InfoBox from \"./InfoBox\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { showTodayData, sortTable } from \"../redux/ducks/conRender\";\r\n\r\nconst nf = new Intl.NumberFormat();\r\n\r\nfunction Table({ ...props }) {\r\n  const dispatch = useDispatch();\r\n  const sortingType = useSelector((state) => state.conRender.sortingType);\r\n  const dataShowing = useSelector((state) => state.conRender.dataShowing);\r\n  // useEffect(() => {\r\n  //   return function scrollTable() {\r\n  //     var elem = document.getElementById(props.country.name);\r\n  //     elem.scrollIntoView(true);\r\n  //   };\r\n  // }, [props.country]);\r\n\r\n  // click = () => {\r\n  //   this.scr.scrollIntoView();\r\n  // }\r\n\r\n  // const handleButtonClick = (scrol) => {\r\n  //   document.getElementById(scrol).scrollIntoView({\r\n  //     behavior: \"smooth\",\r\n  //     block: \"start\",\r\n  //     inline: \"nearest\",\r\n  //   });\r\n  // };\r\n\r\n  // var rows = document.querySelectorAll(props.country.name);\r\n\r\n  // // line is zero-based\r\n  // // line is the row number that you want to see into view after scroll\r\n  // rows[9].scrollIntoView({\r\n  //   behavior: \"smooth\",\r\n  //   block: \"center\",\r\n  // });\r\n\r\n  return (\r\n    <div className=\"table\">\r\n      <span\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          fontSize: \"13px\",\r\n        }}\r\n      >\r\n        <InfoBox\r\n          content=\"All\"\r\n          click={() => dispatch(showTodayData({ dataShow: \"all\" }))}\r\n          onFocus={() => dispatch(sortTable({ sortType: \"\" }))}\r\n          width=\"50px\"\r\n          margin=\"0px\"\r\n          active={dataShowing === \"all\"}\r\n          color=\"rgb(40, 40, 40)\"\r\n          activeColor=\"rgb(250, 250, 250)\"\r\n        />\r\n        <InfoBox\r\n          content=\"Today\"\r\n          click={() => dispatch(showTodayData({ dataShow: \"today\" }))}\r\n          onFocus={() => dispatch(sortTable({ sortType: \"\" }))}\r\n          width=\"60px\"\r\n          margin=\"0px\"\r\n          active={dataShowing === \"today\"}\r\n          color=\"rgb(40, 40, 40)\"\r\n          activeColor=\"rgb(250, 250, 250)\"\r\n        />\r\n      </span>\r\n\r\n      <div className=\"table__data\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th\r\n                onClick={() => dispatch(sortTable({ sortType: \"countries\" }))}\r\n              >\r\n                {sortingType === \"countries\" ? (\r\n                  <p>Country ▾</p>\r\n                ) : (\r\n                  <span>Country</span>\r\n                )}\r\n              </th>\r\n              <th\r\n                onClick={\r\n                  dataShowing === \"all\"\r\n                    ? () => dispatch(sortTable({ sortType: \"cases\" }))\r\n                    : () => dispatch(sortTable({ sortType: \"todayCases\" }))\r\n                }\r\n              >\r\n                {dataShowing === \"today\" ? (\r\n                  <p style={{ fontSize: \"10px\", fontWeight: \"lighter\" }}>\r\n                    Today\r\n                  </p>\r\n                ) : null}\r\n                {sortingType === \"cases\" || sortingType === \"todayCases\" ? (\r\n                  <p>Cases ▾</p>\r\n                ) : (\r\n                  <span>Cases</span>\r\n                )}\r\n              </th>\r\n              <th\r\n                onClick={\r\n                  dataShowing === \"all\"\r\n                    ? () => dispatch(sortTable({ sortType: \"recovered\" }))\r\n                    : () => dispatch(sortTable({ sortType: \"todayRecovered\" }))\r\n                }\r\n              >\r\n                {dataShowing === \"today\" ? (\r\n                  <p style={{ fontSize: \"10px\", fontWeight: \"lighter\" }}>\r\n                    Today\r\n                  </p>\r\n                ) : null}\r\n                {sortingType === \"recovered\" ||\r\n                sortingType === \"todayRecovered\" ? (\r\n                  <p>Recovered ▾</p>\r\n                ) : (\r\n                  <span>Recovered</span>\r\n                )}\r\n              </th>\r\n              <th\r\n                onClick={\r\n                  dataShowing === \"all\"\r\n                    ? () => dispatch(sortTable({ sortType: \"deaths\" }))\r\n                    : () => dispatch(sortTable({ sortType: \"todayDeaths\" }))\r\n                }\r\n              >\r\n                {dataShowing === \"today\" ? (\r\n                  <p style={{ fontSize: \"10px\", fontWeight: \"lighter\" }}>\r\n                    Today\r\n                  </p>\r\n                ) : null}\r\n                {sortingType === \"deaths\" || sortingType === \"todayDeaths\" ? (\r\n                  <p>Deaths ▾</p>\r\n                ) : (\r\n                  <span>Deaths</span>\r\n                )}\r\n              </th>\r\n              <th onClick={() => dispatch(sortTable({ sortType: \"active\" }))}>\r\n                {sortingType === \"active\" ? (\r\n                  <p>Active ▾</p>\r\n                ) : (\r\n                  <span>Active</span>\r\n                )}\r\n              </th>\r\n              <th>Critical</th>\r\n              <th>Tests</th>\r\n              <th>Case/Person</th>\r\n              <th>Death/Person</th>\r\n              <th>Test/Person</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {props.countries.map((country) =>\r\n              dataShowing === \"all\" ? (\r\n                <tr key={country.name} id={country.name}>\r\n                  <td>{country.name}</td>\r\n                  <td>{nf.format(country.cases)}</td>\r\n                  <td>{nf.format(country.recovered)}</td>\r\n                  <td>{nf.format(country.deaths)}</td>\r\n                  <td>{nf.format(country.active)}</td>\r\n                  <td>{nf.format(country.critical)}</td>\r\n                  <td>{nf.format(country.tests)}</td>\r\n                  <td>{nf.format(country.casePerPerson)}</td>\r\n                  <td>{nf.format(country.deathPerPerson)}</td>\r\n                  <td>{nf.format(country.testPerPerson)}</td>\r\n                </tr>\r\n              ) : (\r\n                <tr key={country.name} id={country.name}>\r\n                  <td>{country.name}</td>\r\n                  <td>{nf.format(country.todayCases)}</td>\r\n                  <td>{nf.format(country.todayRecovered)}</td>\r\n                  <td>{nf.format(country.todayDeaths)}</td>\r\n                  <td>{nf.format(country.active)}</td>\r\n                  <td>{nf.format(country.critical)}</td>\r\n                  <td>{nf.format(country.tests)}</td>\r\n                  <td>{nf.format(country.casePerPerson)}</td>\r\n                  <td>{nf.format(country.deathPerPerson)}</td>\r\n                  <td>{nf.format(country.testPerPerson)}</td>\r\n                </tr>\r\n              )\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\n\r\nfunction PieChart({ countries, casesType }) {\r\n  const [topFive, setTopFive] = useState();\r\n\r\n  useEffect(() => {\r\n    let topCountries = [];\r\n    casesType === \"cases\"\r\n      ? (topCountries = countries.sort((a, b) => (a.cases > b.cases ? -1 : 1)))\r\n      : casesType === \"recovered\"\r\n      ? (topCountries = countries.sort((a, b) =>\r\n          a.recovered > b.recovered ? -1 : 1\r\n        ))\r\n      : (topCountries = countries.sort((a, b) =>\r\n          a.deaths > b.deaths ? -1 : 1\r\n        ));\r\n\r\n    let c = topCountries.slice(1, 6);\r\n\r\n    setTopFive(c);\r\n  }, [countries, casesType]);\r\n\r\n  let cName = [];\r\n  let cValue = [];\r\n\r\n  countries.length > 1 ? (cName = topFive.map((c) => c.name)) : (cName = []);\r\n\r\n  if (countries.length > 1) {\r\n    casesType === \"cases\"\r\n      ? (cValue = topFive.map((c) => c.cases))\r\n      : casesType === \"recovered\"\r\n      ? (cValue = topFive.map((c) => c.recovered))\r\n      : (cValue = topFive.map((c) => c.deaths));\r\n  }\r\n\r\n  const options = {\r\n    labels: cName,\r\n    datasets: [\r\n      {\r\n        label: \"Rainfall\",\r\n        backgroundColor: [\r\n          \"#B21F00\",\r\n          \"#C9DE00\",\r\n          \"#2FDE00\",\r\n          \"#00A6B4\",\r\n          \"#6800B4\",\r\n        ],\r\n        hoverBackgroundColor: [\r\n          \"#501800\",\r\n          \"#4B5000\",\r\n          \"#175000\",\r\n          \"#003350\",\r\n          \"#35014F\",\r\n        ],\r\n        data: cValue,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      <Pie\r\n        data={options}\r\n        options={{\r\n          title: {\r\n            display: true,\r\n            text: `Top 5 countries ${casesType} `,\r\n            fontSize: 20,\r\n          },\r\n          legend: {\r\n            display: true,\r\n            position: \"right\",\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PieChart;\r\n","import React from \"react\";\r\n\r\nimport \"../Styling/dataLayout.css\";\r\nimport Table from \"../Components/Table.js\";\r\nimport PieChart from \"./PieChart\";\r\n\r\nconst nf = new Intl.NumberFormat();\r\n\r\nfunction nFormatter(num) {\r\n  const format = [\r\n    { value: 1e18, symbol: \"E\" },\r\n    { value: 1e15, symbol: \"P\" },\r\n    { value: 1e12, symbol: \"T\" },\r\n    { value: 1e9, symbol: \"B\" },\r\n    { value: 1e6, symbol: \"M\" },\r\n    { value: 1e3, symbol: \"k\" },\r\n    { value: 1, symbol: \"\" },\r\n  ];\r\n  const formatIndex = format.findIndex((data) => num >= data.value);\r\n  return (\r\n    (num / format[formatIndex === -1 ? 6 : formatIndex].value).toFixed(2) +\r\n    format[formatIndex === -1 ? 6 : formatIndex].symbol\r\n  );\r\n}\r\n\r\nfunction DataLayout({ country, countries }) {\r\n  return (\r\n    <div className=\"dataLayout\">\r\n      <div className=\"datalayout__overview\">\r\n        <div\r\n          style={{\r\n            borderBottom: \"1px solid gray\",\r\n            width: \"100%\",\r\n            display: \"table\",\r\n          }}\r\n        >\r\n          <p\r\n            style={{\r\n              padding: \"10px\",\r\n              backgroundColor: \"rgb(255, 255, 255)\",\r\n              borderTopRightRadius: \"9px\",\r\n              borderTopLeftRadius: \"9px\",\r\n              boxShadow:\r\n                \"inset 100px 0px 100px -50px rgb(170, 170, 170), inset -100px 0px 100px -50px rgb(170, 170, 170)\",\r\n              textAlign: \"center\",\r\n              verticalAlign: \"middle\",\r\n            }}\r\n          >\r\n            <b style={{ fontSize: \"22px\", fontFamily: \"cursive\" }}>\r\n              {country.name}\r\n            </b>{\" \"}\r\n            Overview\r\n          </p>\r\n        </div>\r\n        <div className=\"datalayout__overview_in\">\r\n          <div\r\n            className=\"datalayout__overview_box\"\r\n            style={{ borderLeft: \"hidden\" }}\r\n          >\r\n            <p className=\"datalayout__overview_title\">\r\n              Cases <br />\r\n              <span className=\"datalayout__overview_boldnumber\">\r\n                {nFormatter(country.cases)}\r\n              </span>{\" \"}\r\n              <br />\r\n              <span className=\"datalayout__overview_dailynumber\">\r\n                + {nf.format(country.todayCases)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"datalayout__overview_box\">\r\n            <p className=\"datalayout__overview_title\">\r\n              Recovered <br />\r\n              <span className=\"datalayout__overview_boldnumber\">\r\n                {nFormatter(country.recovered)}\r\n              </span>{\" \"}\r\n              <br />\r\n              <span className=\"datalayout__overview_dailynumber\">\r\n                + {nf.format(country.todayRecovered)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"datalayout__overview_box\">\r\n            <p className=\"datalayout__overview_title\">\r\n              Deaths <br />\r\n              <span className=\"datalayout__overview_boldnumber\">\r\n                {nFormatter(country.deaths)}\r\n              </span>{\" \"}\r\n              <br />\r\n              <span className=\"datalayout__overview_dailynumber\">\r\n                + {nf.format(country.todayDeaths)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"datalayout__overview_in\">\r\n          <div\r\n            className=\"datalayout__overview_box\"\r\n            style={{ borderLeft: \"hidden\" }}\r\n          >\r\n            <p className=\"datalayout__overview_title\">\r\n              Active <br />{\" \"}\r\n              <span className=\"datalayout__overview_number\">\r\n                {nFormatter(country.active)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"datalayout__overview_box\">\r\n            <p className=\"datalayout__overview_title\">\r\n              Critical <br />{\" \"}\r\n              <span className=\"datalayout__overview_number\">\r\n                {nFormatter(country.critical)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"datalayout__overview_box\">\r\n            <p className=\"datalayout__overview_title\">\r\n              Tests <br />{\" \"}\r\n              <span className=\"datalayout__overview_number\">\r\n                {nFormatter(country.tests)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"datalayout__overview_in\">\r\n          <div\r\n            className=\"datalayout__overview_box\"\r\n            style={{ borderLeft: \"hidden\" }}\r\n          >\r\n            <p className=\"datalayout__overview_title\">\r\n              Case/Person <br />{\" \"}\r\n              <span className=\"datalayout__overview_number\">\r\n                {nFormatter(country.casePerPerson)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"datalayout__overview_box\">\r\n            <p className=\"datalayout__overview_title\">\r\n              Test/Person <br />{\" \"}\r\n              <span className=\"datalayout__overview_number\">\r\n                {nFormatter(country.testPerPerson)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"datalayout__overview_box\">\r\n            <p className=\"datalayout__overview_title\">\r\n              Deaths/Person <br />{\" \"}\r\n              <span className=\"datalayout__overview_number\">\r\n                {nFormatter(country.deathPerPerson)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <p\r\n          style={{ paddingLeft: \"8px\", paddingBottom: \"2px\", fontSize: \"10px\" }}\r\n        >\r\n          <b>Case/Person</b> = <b>X</b> (Every <b>X</b> people there's one Case\r\n          )\r\n        </p>\r\n      </div>\r\n      <div className=\"datalayout__table\">\r\n        <Table\r\n          countries={countries}\r\n          country={country}\r\n        />\r\n      </div>\r\n      {/* <div className=\"datalayout__graph_pie\">\r\n        <PieChart countries={countries} casesType={casesType} />\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DataLayout;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  LoadScript,\r\n  Circle,\r\n  InfoWindow,\r\n} from \"@react-google-maps/api\";\r\n\r\nconst containerStyle = {\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n};\r\n\r\nfunction CircleComponent({\r\n  setShowingInfoWindow,\r\n  setCurrentCountry,\r\n  country,\r\n  currentZoom,\r\n  casesType,\r\n  onClose,\r\n}) {\r\n  if (country.name === \"WorldWide\") {\r\n    return null;\r\n  }\r\n\r\n  const options = {\r\n    casesOptions: {\r\n      strokeColor: \"rgba(255, 0, 0)\",\r\n      strokeWeight: 0.5,\r\n      fillColor: \"rgba(255, 0, 0)\",\r\n      fillOpacity: 0.35,\r\n      clickable: true,\r\n      draggable: false,\r\n      editable: false,\r\n      visible: true,\r\n      zIndex: 1,\r\n    },\r\n    recoveredOptions: {\r\n      strokeColor: \"rgba(0, 255, 150)\",\r\n      strokeWeight: 1.5,\r\n      fillColor: \"rgba(0, 255, 0)\",\r\n      fillOpacity: 0.35,\r\n      clickable: true,\r\n      draggable: false,\r\n      editable: false,\r\n      visible: true,\r\n      zIndex: 1,\r\n    },\r\n    deathsOptions: {\r\n      strokeColor: \"rgba(20, 20, 20)\",\r\n      strokeWeight: 1.5,\r\n      fillColor: \"rgba(0, 0, 0)\",\r\n      fillOpacity: 0.35,\r\n      clickable: true,\r\n      draggable: false,\r\n      editable: false,\r\n      visible: true,\r\n      zIndex: 1,\r\n    },\r\n  };\r\n\r\n  const onCircleClick = () => {\r\n    setCurrentCountry(country);\r\n    setShowingInfoWindow(true);\r\n  };\r\n\r\n  const selectedOptions =\r\n    casesType === \"cases\"\r\n      ? options.casesOptions\r\n      : casesType === \"deaths\"\r\n      ? options.deathsOptions\r\n      : options.recoveredOptions;\r\n\r\n  const selectedType =\r\n    casesType === \"cases\"\r\n      ? country.cases\r\n      : casesType === \"recovered\"\r\n      ? country.recovered\r\n      : country.deaths;\r\n\r\n  return (\r\n    <Circle\r\n      center={country.center}\r\n      options={selectedOptions}\r\n      radius={(Math.sqrt(selectedType) * 600) / currentZoom}\r\n      onMouseOver={onCircleClick}\r\n      onMouseOut={onClose}\r\n      clickable\r\n    />\r\n  );\r\n}\r\n\r\nfunction Maps(props) {\r\n  const [showingInfoWindow, setShowingInfoWindow] = useState(false);\r\n  const [currentCountry, setCurrentCountry] = useState(props.country);\r\n  const [currentZoom, setCurrentZoom] = useState();\r\n\r\n  function handleZoomChanged() {\r\n    setCurrentZoom(this.getZoom() + 1);\r\n  }\r\n\r\n  const onClose = () => {\r\n    showingInfoWindow && setShowingInfoWindow(false);\r\n  };\r\n\r\n  const nf = new Intl.NumberFormat();\r\n\r\n  return (\r\n    //googleMapsApiKey=\"AIzaSyA0qwEl7BqF71zcbmOvKq67ZgmPJNB47AM\"\r\n    <LoadScript>\r\n      <GoogleMap\r\n        mapContainerStyle={containerStyle}\r\n        center={props.country.center}\r\n        zoom={props.country.zoom}\r\n        onZoomChanged={handleZoomChanged}\r\n        options={{\r\n          // gestureHandling: \"greedy\",\r\n          streetViewControl: false,\r\n          mapTypeControl: false,\r\n          maxZoom: 6,\r\n          minZoom: 1,\r\n        }}\r\n      >\r\n        <>\r\n          {props.countries.map((country) => (\r\n            <CircleComponent\r\n              setShowingInfoWindow={setShowingInfoWindow}\r\n              setCurrentCountry={setCurrentCountry}\r\n              country={country}\r\n              key={country.name}\r\n              showingInfoWindow={showingInfoWindow}\r\n              currentZoom={currentZoom}\r\n              casesType={props.casesType}\r\n              onClose={onClose}\r\n            />\r\n          ))}\r\n\r\n          {showingInfoWindow && (\r\n            <InfoWindow position={currentCountry.center} onCloseClick={onClose}>\r\n              <div>\r\n                <span>\r\n                  <img\r\n                    alt={`${currentCountry.name} Flag`}\r\n                    src={currentCountry.flag}\r\n                    className=\"map_image\"\r\n                  />\r\n                </span>\r\n                <br />\r\n                <span>{`${currentCountry.name}`}</span>\r\n                <br />\r\n                <span>{`Cases: ${nf.format(currentCountry.cases)}`}</span>\r\n                <br />\r\n                <span>{`Recovered: ${nf.format(\r\n                  currentCountry.recovered\r\n                )}`}</span>\r\n                <br />\r\n                <span>{`Deaths: ${nf.format(currentCountry.deaths)}`}</span>\r\n              </div>\r\n            </InfoWindow>\r\n          )}\r\n        </>\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  );\r\n}\r\n\r\nexport default React.memo(Maps);\r\n","import React from \"react\";\r\n\r\nimport Maps from \"./GoogleMap.js\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction Map(props) {\r\n  const casesType = useSelector((state) => state.conRender.casesType);\r\n  const color =\r\n    casesType === \"cases\"\r\n      ? \"rgba(200, 20, 50, 0.5)\"\r\n      : casesType === \"recovered\"\r\n      ? \"rgba(0, 200, 50, 0.5)\"\r\n      : \"rgba(100, 100, 100, 0.5)\";\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", height: \"100%\", width: \"100%\" }}>\r\n      <div\r\n        style={{\r\n          padding: \"3px\",\r\n          // borderBottom: \"1px solid rgb(180, 180, 180)\",\r\n        }}\r\n      >\r\n        <p style={{ display: \"inline\" }}>Map of </p>\r\n        <h3 style={{ display: \"inline\", color: color }}>{casesType}</h3>\r\n      </div>\r\n      <div style={{ position: \"relative\", height: \"250px\", width: \"100%\" }}>\r\n        <Maps\r\n          countries={props.countries}\r\n          country={props.country}\r\n          casesType={casesType}\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <p\r\n          style={{\r\n            fontSize: \"13px\",\r\n            color: \"gray\",\r\n            paddingLeft: \"10px\",\r\n            display: \"inline\",\r\n            position: \"relative\",\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          Source:\r\n        </p>\r\n        <a\r\n          href=\"https://www.worldometers.info/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          style={{ color: \"gray\", display: \"inline\", fontSize: \"10px\" }}\r\n        >\r\n          Worldometer\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\n\r\nimport \"../Styling/Footer.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p>\r\n        Contact me:{\" \"}\r\n        <a href=\"mailto: adham@adhamnasr.com\">adham@adhamnasr.com</a>\r\n      </p>\r\n      <p style={{ fontSize: \"11px\" }}>Copyright&copy; 2020</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./Styling/App.css\";\r\n\r\nimport Header from \"./Components/Header/Header.js\";\r\nimport LineGraph from \"./Components/LineGraph\";\r\nimport pic from \"./Images/earth.jpg\";\r\nimport Slider from \"./Components/Slider.js\";\r\nimport DataLayout from \"./Components/DataLayout\";\r\nimport Map from \"./Components/Map\";\r\nimport Footer from \"./Components/Footer\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction App() {\r\n  const sortType = useSelector((state) => state.conRender.sortingType);\r\n\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCountry] = useState({});\r\n\r\n  const isMobile = useWindowSize();\r\n\r\n  function useWindowSize() {\r\n    // Initialize state with undefined width/height so server and client renders match\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n    const [windowSize, setWindowSize] = useState({\r\n      width: undefined,\r\n      height: undefined,\r\n    });\r\n\r\n    useEffect(() => {\r\n      // Handler to call on window resize\r\n      function handleResize() {\r\n        // Set window width/height to state\r\n        setWindowSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        });\r\n      }\r\n\r\n      // Add event listener\r\n      window.addEventListener(\"resize\", handleResize);\r\n\r\n      // Call handler right away so state gets updated with initial window size\r\n      handleResize();\r\n\r\n      // Remove event listener on cleanup\r\n      return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n\r\n    return windowSize;\r\n  }\r\n\r\n  useEffect(() => {\r\n    const sortData = (data) => {\r\n      const sortedData = [...data];\r\n\r\n      return sortType === \"cases\"\r\n        ? sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1))\r\n        : sortType === \"deaths\"\r\n        ? sortedData.sort((a, b) => (a.deaths > b.deaths ? -1 : 1))\r\n        : sortType === \"recovered\"\r\n        ? sortedData.sort((a, b) => (a.recovered > b.recovered ? -1 : 1))\r\n        : sortType === \"todayCases\"\r\n        ? sortedData.sort((a, b) => (a.todayCases > b.todayCases ? -1 : 1))\r\n        : sortType === \"todayDeaths\"\r\n        ? sortedData.sort((a, b) => (a.todayDeaths > b.todayDeaths ? -1 : 1))\r\n        : sortType === \"todayRecovered\"\r\n        ? sortedData.sort((a, b) =>\r\n            a.todayRecovered > b.todayRecovered ? -1 : 1\r\n          )\r\n        : sortType === \"active\"\r\n        ? sortedData.sort((a, b) => (a.active > b.active ? -1 : 1))\r\n        : sortType === \"countries\"\r\n        ? sortedData.sort((a, b) => (a.name < b.name ? -1 : 1))\r\n        : sortedData.sort((a, b) => (a > b ? -1 : 1));\r\n    };\r\n    const sorted = sortData(countries);\r\n    setCountries(sorted);\r\n  }, [sortType]);\r\n\r\n  const onChange = (event) => {\r\n    const { value } = event.target;\r\n    let countryS = countries.find((c) => c.name === value);\r\n\r\n    if (countryS !== undefined) {\r\n      setCountry(countryS);\r\n      document.activeElement.blur();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const selectedCountry = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/all?yesterday=true\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const worldwide = data;\r\n          worldwide.name = \"WorldWide\";\r\n          worldwide.flag = pic;\r\n          worldwide.center = {\r\n            lat: 0,\r\n            lng: 0,\r\n          };\r\n          worldwide.zoom = 1;\r\n          worldwide.casePerPerson = data.population / data.cases;\r\n          worldwide.testPerPerson = data.population / data.tests;\r\n          worldwide.deathPerPerson = data.population / data.deaths;\r\n          worldwide.timeline = null;\r\n          // worldwide.todayUpdated = 0;\r\n          setCountries((countries) => countries.concat(worldwide));\r\n          setCountry(worldwide);\r\n        });\r\n    };\r\n    selectedCountry();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const selectedCountry = async () => {\r\n      await fetch(`https://disease.sh/v3/covid-19/countries?yesterday=true`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countriesS = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n            cases: country.cases,\r\n            todayCases: country.todayCases,\r\n            recovered: country.recovered,\r\n            todayRecovered: country.todayRecovered,\r\n            deaths: country.deaths,\r\n            todayDeaths: country.todayDeaths,\r\n            flag: country.countryInfo.flag,\r\n            center: {\r\n              lat: country.countryInfo.lat,\r\n              lng: country.countryInfo.long,\r\n            },\r\n            zoom: 4,\r\n            active: country.active,\r\n            critical: country.critical,\r\n            tests: country.tests,\r\n            casePerPerson: country.oneCasePerPeople,\r\n            testPerPerson: country.oneTestPerPeople,\r\n            deathPerPerson: country.oneDeathPerPeople,\r\n            timeline: null,\r\n            // todayUpdated: 0,\r\n          }));\r\n          setCountries((countries) => countries.concat(countriesS));\r\n        });\r\n    };\r\n    selectedCountry();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   const selectedCountry = async () => {\r\n  //     await fetch(\"https://disease.sh/v3/covid-19/all?yesterday=false\")\r\n  //       .then((response) => response.json())\r\n  //       .then((data) => {\r\n  //         const index = countries.findIndex((e, index) => {\r\n  //           return e.name === \"WorldWide\";\r\n  //         });\r\n  //         if (countries[index] !== -1 && countries.length > 1) {\r\n  //           countries[index] = {\r\n  //             ...countries[index], //spread notation for the selected object\r\n  //             todayUpdated: data.todayCases,\r\n  //           };\r\n  //           setCountries(countries);\r\n  //         }\r\n  //       });\r\n  //   };\r\n  //   selectedCountry();\r\n  // }, [country]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__header\" id=\"header\">\r\n        <Header\r\n          countries={countries}\r\n          changeCountry={onChange}\r\n          country={country}\r\n          setCountry={setCountry}\r\n          isMobile={isMobile}\r\n        />\r\n      </div>\r\n      <div className=\"app__body\" id=\"bodyExtension\">\r\n        <div className=\"app__dataLayout\">\r\n          <DataLayout country={country} countries={countries} />\r\n        </div>\r\n        <div className=\"app__map_wrapper\">\r\n          <Map countries={countries} country={country} />\r\n        </div>\r\n        <div className=\"app__graph\">\r\n          <div className=\"app__graph_graph\">\r\n            <LineGraph country={country} setCountry={setCountry} />\r\n          </div>\r\n          <Slider />\r\n        </div>\r\n      </div>\r\n      <div className=\"app__footer\">\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport conrenderReducer from \"./ducks/conRender\";\r\n\r\nconst reducer = combineReducers({\r\n  conRender: conrenderReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer,\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport store from \"./redux/configureStore\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// After user zoom out, if different country selected from dropdown, map doesn't zoom back to it. Check the setZoom on country change\r\n// When a country is selected table scrolls to that country and highlights raw\r\n// Check out why the map circles load twice when deaths selected. Maybe cuz \"cases\" is set to default\r\n\r\n// total button not centered on apple\r\n"],"sourceRoot":""}