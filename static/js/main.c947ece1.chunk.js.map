{"version":3,"sources":["Components/Header/DropDown.js","Components/InfoBox.js","Components/Header/Header.js","Components/LineGraph.js","Images/earth.jpg","Components/Slider.js","Components/Table.js","Components/PieChart.js","Components/DataLayout.js","Components/GoogleMap.js","Components/Map.js","Components/Footer.js","App.js","index.js"],"names":["clearInput","document","getElementById","value","fillInput","country","DropDown","props","useEffect","name","className","size","id","list","placeholder","onChange","changeCountry","onFocus","onClick","onBlur","countries","map","InfoBox","styling","padding","width","color","borderRadius","radius","backgroundColor","bcolor","boxShadow","shadow","margin","active","activeColor","style","marginLeft","marginL","click","content","Header","c","find","setCasesType","setDataShowing","setGraphSlider","setSortType","undefined","setCountry","border","cursor","outline","alt","src","flag","casesType","nf","Intl","NumberFormat","options","animation","duration","hover","animationDuration","responsiveAnimationDuration","legend","display","elements","points","line","tension","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","format","xAxes","gridLines","type","time","tooltipFormat","yAxes","ticks","callback","index","values","LineGraph","useState","chartData","setChartData","dataTotal","setDataTotal","daily","cName","setCName","setTotal","buildChartData","lastDataPoint","cases","date","newDataPoint","x","y","push","buildChartTotal","a","fetch","then","response","json","message","timeline","fetchData","fetchAllData","setSliderMax","length","sliderValue","graphSlider","slice","borderColor","maxHeight","position","height","datasets","pointRadius","fill","hoverRadius","Slider","minWidth","min","max","sliderMax","step","event","target","Table","dataShowing","flexDirection","fontSize","colSpan","top","sortType","fontWeight","recovered","deaths","critical","tests","casePerPerson","deathPerPerson","testPerPerson","todayCases","todayRecovered","todayDeaths","PieChart","nFormatter","num","symbol","formatIndex","findIndex","toFixed","DataLayout","borderBottom","borderTopRightRadius","borderTopLeftRadius","textAlign","verticalAlign","fontFamily","borderLeft","paddingLeft","paddingBottom","containerStyle","CircleComponent","setShowingInfoWindow","setCurrentCountry","currentZoom","onClose","casesOptions","strokeColor","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","zIndex","recoveredOptions","deathsOptions","selectedOptions","selectedType","center","Math","sqrt","onMouseOver","onMouseOut","Maps","showingInfoWindow","currentCountry","setCurrentZoom","googleMapsApiKey","googleMapsClientId","mapContainerStyle","zoom","onZoomChanged","this","getZoom","streetViewControl","mapTypeControl","maxZoom","minZoom","onCloseClick","React","memo","Map","href","rel","Footer","App","setCountries","graphsliderMax","setGraphSliderMax","sorted","sortedData","sort","b","sortData","worldwide","pic","lat","lng","population","concat","selectedCountry","countriesS","countryInfo","iso2","long","oneCasePerPeople","oneTestPerPeople","oneDeathPerPeople","countryS","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c947ece1.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst clearInput = () => {\r\n  document.getElementById(\"myInput\").value = null;\r\n};\r\nconst fillInput = (country) => {\r\n  document.getElementById(\"myInput\").value = country;\r\n};\r\n\r\nfunction DropDown(props) {\r\n  useEffect(() => {\r\n    fillInput(props.country.name);\r\n  }, [props.country]);\r\n\r\n  return (\r\n    <div className=\"header__dropdown\">\r\n      <input\r\n        size=\"8\"\r\n        id=\"myInput\"\r\n        list=\"dropdown__countries\"\r\n        className=\"header__dropbtn\"\r\n        placeholder=\"Search Country\"\r\n        onChange={props.changeCountry}\r\n        onFocus={() => clearInput()}\r\n        onClick={() => clearInput()}\r\n        onBlur={() => fillInput(props.country.name)}\r\n      />\r\n      <datalist id=\"dropdown__countries\">\r\n        {props.countries.map((country) => (\r\n          <option key={country.value + country.name} value={country.name} />\r\n        ))}\r\n      </datalist>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropDown;\r\n","import React from \"react\";\r\n\r\nimport \".././Styling/infoBox.css\";\r\n\r\nfunction InfoBox(props) {\r\n  let styling = {\r\n    padding: props.padding,\r\n    width: props.width,\r\n    color: props.color,\r\n    borderRadius: props.radius,\r\n    backgroundColor: props.bcolor,\r\n    boxShadow: props.shadow,\r\n    margin: props.margin,\r\n  };\r\n\r\n  if (props.active) {\r\n    styling = {\r\n      padding: props.padding,\r\n      width: props.width,\r\n      color: props.activeColor,\r\n      borderRadius: props.radius,\r\n      backgroundColor: props.bcolor,\r\n      margin: props.margin,\r\n      // fontSize: \"24px\",\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"infoBox\"\r\n      style={{ margin: props.margin, marginLeft: props.marginL }}\r\n    >\r\n      <button\r\n        className=\"infoBox__button\"\r\n        onClick={props.click}\r\n        style={styling}\r\n        onFocus={props.onFocus}\r\n      >\r\n        <span>\r\n          <p>{props.content}</p>\r\n        </span>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\n\r\nimport DropDown from \"./DropDown\";\r\nimport InfoBox from \"../../Components/InfoBox\";\r\n\r\nimport \"../../Styling/header.css\";\r\n\r\nfunction Header(props) {\r\n  const c = props.countries.find((c) => c.name === \"WorldWide\");\r\n  return (\r\n    <div className=\"header\">\r\n      <button\r\n        className=\"header__title\"\r\n        onClick={() => (\r\n          props.setCasesType(\"cases\"),\r\n          props.setDataShowing(\"all\"),\r\n          props.setGraphSlider({ value: \"200\" }),\r\n          props.setSortType(\"\"),\r\n          c !== undefined ? props.setCountry(c) : null\r\n        )}\r\n        style={{\r\n          border: \"0px\",\r\n          backgroundColor: \"rgba(230, 230, 230,1)\",\r\n          cursor: \"pointer\",\r\n          outline: \"none\",\r\n        }}\r\n      >\r\n        Covid 19 Tracker\r\n      </button>\r\n\r\n      <img\r\n        alt={`${props.country.name} Flag`}\r\n        src={props.country.flag}\r\n        className=\"header_image\"\r\n      />\r\n\r\n      <div className=\"header__dd_img\">\r\n        <div className=\"header__right\">\r\n          <DropDown\r\n            countries={props.countries}\r\n            changeCountry={props.changeCountry}\r\n            country={props.country}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"app__infoBox\">\r\n          <InfoBox\r\n            content=\"Cases\"\r\n            active={props.casesType === \"cases\"}\r\n            click={() => props.setCasesType(\"cases\")}\r\n            padding=\"10px\"\r\n            activeColor=\"rgb(225, 0, 0)\"\r\n          />\r\n          <InfoBox\r\n            content=\"Recovered\"\r\n            active={props.casesType === \"recovered\"}\r\n            click={() => props.setCasesType(\"recovered\")}\r\n            padding=\"10px\"\r\n            activeColor=\"rgb(70, 250, 70)\"\r\n          />\r\n          <InfoBox\r\n            content=\"Deaths\"\r\n            active={props.casesType === \"deaths\"}\r\n            click={() => props.setCasesType(\"deaths\")}\r\n            padding=\"10px\"\r\n            activeColor=\"rgb(50, 50, 50)\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nimport InfoBox from \"./InfoBox\";\r\n\r\nconst nf = new Intl.NumberFormat();\r\n\r\nconst options = {\r\n  animation: {\r\n    duration: 0,\r\n  },\r\n  hover: {\r\n    animationDuration: 0,\r\n  },\r\n  responsiveAnimationDuration: 0,\r\n  legend: {\r\n    display: true,\r\n  },\r\n  elements: {\r\n    points: {\r\n      radius: 0,\r\n    },\r\n    line: {\r\n      tension: 0.4, // disables bezier curves\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return nf.format(tooltipItem.value);\r\n      },\r\n    },\r\n  },\r\n  hover: {\r\n    mode: \"index\",\r\n    intersect: true,\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        gridLines: {\r\n          display: true,\r\n        },\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: true,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return nf.format(value);\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nfunction LineGraph({ country, casesType, ...props }) {\r\n  const [chartData, setChartData] = useState([]);\r\n  const [dataTotal, setDataTotal] = useState([]);\r\n  const [daily, setDaily] = useState(true);\r\n  const [cName, setCName] = useState(\"Loading...\");\r\n  const [total, setTotal] = useState({});\r\n\r\n  const buildChartData = (data, casesType = \"cases\") => {\r\n    if (data) {\r\n      let chartData = [];\r\n      let lastDataPoint;\r\n      if (data.cases !== undefined) {\r\n        for (let date in data.cases) {\r\n          if (lastDataPoint && daily) {\r\n            let newDataPoint = {\r\n              x: date,\r\n              y:\r\n                data[casesType][date] - lastDataPoint < 0\r\n                  ? 0\r\n                  : data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n          }\r\n          if (lastDataPoint && daily === false) {\r\n            let newDataPoint = {\r\n              x: date,\r\n              y: data[casesType][date] < 0 ? 0 : data[casesType][date],\r\n            };\r\n            chartData.push(newDataPoint);\r\n          }\r\n\r\n          lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n      }\r\n    }\r\n  };\r\n\r\n  const buildChartTotal = (data, casesType = \"cases\") => {\r\n    if (data) {\r\n      let chartData = [];\r\n      let lastDataPoint;\r\n      if (data.cases !== undefined) {\r\n        for (let date in data.cases) {\r\n          if (lastDataPoint) {\r\n            let newDataPoint = {\r\n              x: date,\r\n              y: data[casesType][date] < 0 ? 0 : data[casesType][date],\r\n            };\r\n            chartData.push(newDataPoint);\r\n          }\r\n          lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (country.name !== \"WorldWide\" && country.name !== undefined) {\r\n      const fetchData = async () => {\r\n        await fetch(\r\n          `https://disease.sh/v3/covid-19/historical/${country.name}?lastdays=all`\r\n        )\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            if (\r\n              data.message ===\r\n              \"Country not found or doesn't have any historical data\"\r\n            ) {\r\n              return null;\r\n            }\r\n\r\n            setChartData(buildChartData(data.timeline, casesType));\r\n            setDataTotal(buildChartTotal(data.timeline, casesType));\r\n            if (chartData) setCName(data.country);\r\n            props.setGraphSlider({ value: 150 });\r\n          });\r\n      };\r\n      fetchData();\r\n    } else {\r\n      const fetchAllData = async () => {\r\n        await fetch(\r\n          `https://disease.sh/v3/covid-19/historical/all?lastdays=all`\r\n        )\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            data.country = \"WorldWide\";\r\n            setCName(data.country);\r\n\r\n            setChartData(buildChartData(data, casesType));\r\n            setDataTotal(buildChartTotal(data, casesType));\r\n            props.setGraphSlider({ value: 200 });\r\n          });\r\n      };\r\n      fetchAllData();\r\n    }\r\n  }, [country.name, daily, casesType]);\r\n\r\n  //Slider useEffect to so the data showing the value user set on the slider\r\n  useEffect(() => {\r\n    if (chartData && dataTotal) {\r\n      props.setSliderMax(chartData.length);\r\n      let sliderValue = chartData.length - props.graphSlider.value;\r\n      let c = chartData.slice(sliderValue, chartData.length);\r\n      props.setCountry({ ...country, timeline: c });\r\n      setTotal(dataTotal.slice(sliderValue, dataTotal.length));\r\n    }\r\n  }, [props.graphSlider, chartData, dataTotal]);\r\n\r\n  const color =\r\n    casesType === \"cases\"\r\n      ? \"rgba(200, 20, 50, 0.5)\"\r\n      : casesType === \"recovered\"\r\n      ? \"rgba(0, 200, 50, 0.5)\"\r\n      : \"rgba(100, 100, 100, 0.5)\";\r\n\r\n  const borderColor =\r\n    casesType === \"cases\"\r\n      ? \"rgb(200, 20, 50)\"\r\n      : casesType === \"recovered\"\r\n      ? \"rgb(0, 200, 50)\"\r\n      : \"rgb(100, 100, 100)\";\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        maxHeight: \"100%\",\r\n        position: \"relative\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      {/* <div className=\"linegraph__graphbuttons\">\r\n        <h2 style={{ color: borderColor }}>{cName}</h2>\r\n        <InfoBox\r\n          content=\"Total\"\r\n          margin=\"0px\"\r\n          marginL=\"5px\"\r\n          bcolor={borderColor}\r\n          shadow={` 0 6px ${color}`}\r\n          click={() => setDaily(false)}\r\n          activeColor=\"rgb(255, 255, 255)\"\r\n          active={daily === false}\r\n          color=\"rgb(0, 0, 0)\"\r\n        />\r\n        <InfoBox\r\n          content=\"Daily\"\r\n          margin=\"0px\"\r\n          marginL=\"5px\"\r\n          bcolor={borderColor}\r\n          shadow={` 0 6px ${color}`}\r\n          click={() => setDaily(true)}\r\n          activeColor=\"rgb(255, 255, 255)\"\r\n          active={daily === true}\r\n          color=\"rgb(0, 0, 0)\"\r\n        />\r\n      </div> */}\r\n\r\n      {country.timeline?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: color,\r\n                borderColor: borderColor,\r\n                data: country.timeline,\r\n                pointRadius: 1,\r\n                fill: true,\r\n                label: cName + \" \" + casesType,\r\n                hoverRadius: 5,\r\n              },\r\n              // {\r\n              //   backgroundColor: \"rgba(25, 0, 255, 0.7)\",\r\n              //   borderColor: \"rgb(25, 0, 255)\",\r\n              //   data: total,\r\n              //   pointRadius: 1,\r\n              //   fill: false,\r\n              //   label: \"Total\",\r\n              //   hoverRadius: 5,\r\n              // },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","export default __webpack_public_path__ + \"static/media/earth.f22c010c.jpg\";","import React from \"react\";\r\n\r\nimport \"../Styling/slider.css\";\r\n\r\nfunction Slider(props) {\r\n  const handleChange = (event) => {\r\n    props.setGraphSlider({ value: event.target.value });\r\n  };\r\n\r\n  return (\r\n    <div className=\"slidecontainer\">\r\n      <p style={{ minWidth: \"110px\" }}>Past {props.graphSlider.value} Days:</p>\r\n      <input\r\n        type=\"range\"\r\n        min=\"10\"\r\n        max={props.sliderMax}\r\n        step=\"1\"\r\n        value={props.graphSlider.value}\r\n        onChange={handleChange}\r\n        className=\"slider\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Slider;\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"../Styling/table.css\";\r\nimport InfoBox from \"./InfoBox\";\r\n\r\nconst nf = new Intl.NumberFormat();\r\n\r\nfunction Table({ dataShowing, ...props }) {\r\n  // useEffect(() => {\r\n  //   return function scrollTable() {\r\n  //     var elem = document.getElementById(props.country.name);\r\n  //     elem.scrollIntoView(true);\r\n  //   };\r\n  // }, [props.country]);\r\n\r\n  // click = () => {\r\n  //   this.scr.scrollIntoView();\r\n  // }\r\n\r\n  // const handleButtonClick = (scrol) => {\r\n  //   document.getElementById(scrol).scrollIntoView({\r\n  //     behavior: \"smooth\",\r\n  //     block: \"start\",\r\n  //     inline: \"nearest\",\r\n  //   });\r\n  // };\r\n\r\n  // var rows = document.querySelectorAll(props.country.name);\r\n\r\n  // // line is zero-based\r\n  // // line is the row number that you want to see into view after scroll\r\n  // rows[9].scrollIntoView({\r\n  //   behavior: \"smooth\",\r\n  //   block: \"center\",\r\n  // });\r\n\r\n  return (\r\n    <div className=\"table\">\r\n      <span\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          fontSize: \"13px\",\r\n        }}\r\n      >\r\n        <InfoBox\r\n          content=\"All\"\r\n          click={() => props.setDataShowing(\"all\")}\r\n          onFocus={() => props.setSortType(\"\")}\r\n          width=\"50px\"\r\n          margin=\"0px\"\r\n          active={dataShowing === \"all\"}\r\n          color=\"rgb(40, 40, 40)\"\r\n          activeColor=\"rgb(250, 250, 250)\"\r\n        />\r\n        <InfoBox\r\n          content=\"Today\"\r\n          click={() => props.setDataShowing(\"today\")}\r\n          onFocus={() => props.setSortType(\"\")}\r\n          width=\"50px\"\r\n          margin=\"0px\"\r\n          active={dataShowing === \"today\"}\r\n          color=\"rgb(40, 40, 40)\"\r\n          activeColor=\"rgb(250, 250, 250)\"\r\n        />\r\n      </span>\r\n\r\n      <div className=\"table__data\">\r\n        <table style={{ position: \"relative\" }}>\r\n          <tbody>\r\n            <tr colSpan=\"3\">\r\n              <th\r\n                style={{ position: \"sticky\", top: 0 }}\r\n                onClick={() => props.setSortType(\"countries\")}\r\n              >\r\n                {props.sortType === \"countries\" ? (\r\n                  <p>Country ▾</p>\r\n                ) : (\r\n                  <span>Country</span>\r\n                )}\r\n              </th>\r\n              <th\r\n                style={{ position: \"sticky\", top: 0 }}\r\n                onClick={\r\n                  dataShowing === \"all\"\r\n                    ? () => props.setSortType(\"cases\")\r\n                    : () => props.setSortType(\"todayCases\")\r\n                }\r\n              >\r\n                {dataShowing === \"today\" ? (\r\n                  <p style={{ fontSize: \"10px\", fontWeight: \"lighter\" }}>\r\n                    Today\r\n                  </p>\r\n                ) : null}\r\n                {props.sortType === \"cases\" ||\r\n                props.sortType === \"todayCases\" ? (\r\n                  <p>Cases ▾</p>\r\n                ) : (\r\n                  <span>Cases</span>\r\n                )}\r\n              </th>\r\n              <th\r\n                style={{ position: \"sticky\", top: 0 }}\r\n                onClick={\r\n                  dataShowing === \"all\"\r\n                    ? () => props.setSortType(\"recovered\")\r\n                    : () => props.setSortType(\"todayRecovered\")\r\n                }\r\n              >\r\n                {dataShowing === \"today\" ? (\r\n                  <p style={{ fontSize: \"10px\", fontWeight: \"lighter\" }}>\r\n                    Today\r\n                  </p>\r\n                ) : null}\r\n                {props.sortType === \"recovered\" ||\r\n                props.sortType === \"todayRecovered\" ? (\r\n                  <p>Recovered ▾</p>\r\n                ) : (\r\n                  <span>Recovered</span>\r\n                )}\r\n              </th>\r\n              <th\r\n                style={{ position: \"sticky\", top: 0 }}\r\n                onClick={\r\n                  dataShowing === \"all\"\r\n                    ? () => props.setSortType(\"deaths\")\r\n                    : () => props.setSortType(\"todayDeaths\")\r\n                }\r\n              >\r\n                {dataShowing === \"today\" ? (\r\n                  <p style={{ fontSize: \"10px\", fontWeight: \"lighter\" }}>\r\n                    Today\r\n                  </p>\r\n                ) : null}\r\n                {props.sortType === \"deaths\" ||\r\n                props.sortType === \"todayDeaths\" ? (\r\n                  <p>Deaths ▾</p>\r\n                ) : (\r\n                  <span>Deaths</span>\r\n                )}\r\n              </th>\r\n              <th\r\n                style={{ position: \"sticky\", top: 0 }}\r\n                onClick={() => props.setSortType(\"active\")}\r\n              >\r\n                {props.sortType === \"active\" ? (\r\n                  <p>Active ▾</p>\r\n                ) : (\r\n                  <span>Active</span>\r\n                )}\r\n              </th>\r\n              <th style={{ position: \"sticky\", top: 0 }}>Critical</th>\r\n              <th style={{ position: \"sticky\", top: 0 }}>Tests</th>\r\n              <th style={{ position: \"sticky\", top: 0 }}>Case/Person</th>\r\n              <th style={{ position: \"sticky\", top: 0 }}>Death/Person</th>\r\n              <th style={{ position: \"sticky\", top: 0 }}>Test/Person</th>\r\n            </tr>\r\n\r\n            {props.countries.map((country) =>\r\n              dataShowing === \"all\" ? (\r\n                <tr key={country.name} id={country.name}>\r\n                  <td>{country.name}</td>\r\n                  <td>{nf.format(country.cases)}</td>\r\n                  <td>{nf.format(country.recovered)}</td>\r\n                  <td>{nf.format(country.deaths)}</td>\r\n                  <td>{nf.format(country.active)}</td>\r\n                  <td>{nf.format(country.critical)}</td>\r\n                  <td>{nf.format(country.tests)}</td>\r\n                  <td>{nf.format(country.casePerPerson)}</td>\r\n                  <td>{nf.format(country.deathPerPerson)}</td>\r\n                  <td>{nf.format(country.testPerPerson)}</td>\r\n                </tr>\r\n              ) : (\r\n                <tr key={country.name} id={country.name}>\r\n                  <td>{country.name}</td>\r\n                  <td>{nf.format(country.todayCases)}</td>\r\n                  <td>{nf.format(country.todayRecovered)}</td>\r\n                  <td>{nf.format(country.todayDeaths)}</td>\r\n                  <td>{nf.format(country.active)}</td>\r\n                  <td>{nf.format(country.critical)}</td>\r\n                  <td>{nf.format(country.tests)}</td>\r\n                  <td>{nf.format(country.casePerPerson)}</td>\r\n                  <td>{nf.format(country.deathPerPerson)}</td>\r\n                  <td>{nf.format(country.testPerPerson)}</td>\r\n                </tr>\r\n              )\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\n\r\nfunction PieChart({ countries, casesType }) {\r\n  const [topFive, setTopFive] = useState();\r\n\r\n  useEffect(() => {\r\n    let topCountries = [];\r\n    casesType === \"cases\"\r\n      ? (topCountries = countries.sort((a, b) => (a.cases > b.cases ? -1 : 1)))\r\n      : casesType === \"recovered\"\r\n      ? (topCountries = countries.sort((a, b) =>\r\n          a.recovered > b.recovered ? -1 : 1\r\n        ))\r\n      : (topCountries = countries.sort((a, b) =>\r\n          a.deaths > b.deaths ? -1 : 1\r\n        ));\r\n\r\n    let c = topCountries.slice(1, 6);\r\n\r\n    setTopFive(c);\r\n  }, [countries, casesType]);\r\n\r\n  let cName = [];\r\n  let cValue = [];\r\n\r\n  countries.length > 1 ? (cName = topFive.map((c) => c.name)) : (cName = []);\r\n\r\n  if (countries.length > 1) {\r\n    casesType === \"cases\"\r\n      ? (cValue = topFive.map((c) => c.cases))\r\n      : casesType === \"recovered\"\r\n      ? (cValue = topFive.map((c) => c.recovered))\r\n      : (cValue = topFive.map((c) => c.deaths));\r\n  }\r\n\r\n  const options = {\r\n    labels: cName,\r\n    datasets: [\r\n      {\r\n        label: \"Rainfall\",\r\n        backgroundColor: [\r\n          \"#B21F00\",\r\n          \"#C9DE00\",\r\n          \"#2FDE00\",\r\n          \"#00A6B4\",\r\n          \"#6800B4\",\r\n        ],\r\n        hoverBackgroundColor: [\r\n          \"#501800\",\r\n          \"#4B5000\",\r\n          \"#175000\",\r\n          \"#003350\",\r\n          \"#35014F\",\r\n        ],\r\n        data: cValue,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      <Pie\r\n        data={options}\r\n        options={{\r\n          title: {\r\n            display: true,\r\n            text: `Top 5 countries ${casesType} `,\r\n            fontSize: 20,\r\n          },\r\n          legend: {\r\n            display: true,\r\n            position: \"right\",\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PieChart;\r\n","import React from \"react\";\r\n\r\nimport \"../Styling/dataLayout.css\";\r\nimport Table from \"../Components/Table.js\";\r\nimport PieChart from \"./PieChart\";\r\n\r\nconst nf = new Intl.NumberFormat();\r\n\r\nfunction nFormatter(num) {\r\n  const format = [\r\n    { value: 1e18, symbol: \"E\" },\r\n    { value: 1e15, symbol: \"P\" },\r\n    { value: 1e12, symbol: \"T\" },\r\n    { value: 1e9, symbol: \"G\" },\r\n    { value: 1e6, symbol: \"M\" },\r\n    { value: 1e3, symbol: \"k\" },\r\n    { value: 1, symbol: \"\" },\r\n  ];\r\n  const formatIndex = format.findIndex((data) => num >= data.value);\r\n  return (\r\n    (num / format[formatIndex === -1 ? 6 : formatIndex].value).toFixed(2) +\r\n    format[formatIndex === -1 ? 6 : formatIndex].symbol\r\n  );\r\n}\r\n\r\nfunction DataLayout({\r\n  country,\r\n  countries,\r\n  casesType,\r\n  sortType,\r\n  setSortType,\r\n  setDataShowing,\r\n  dataShowing,\r\n}) {\r\n  return (\r\n    <div className=\"dataLayout\">\r\n      <div className=\"datalayout__overview\">\r\n        <div\r\n          style={{\r\n            borderBottom: \"1px solid gray\",\r\n            width: \"100%\",\r\n            display: \"table\",\r\n          }}\r\n        >\r\n          <p\r\n            style={{\r\n              padding: \"10px\",\r\n              backgroundColor: \"rgb(255, 255, 255)\",\r\n              borderTopRightRadius: \"9px\",\r\n              borderTopLeftRadius: \"9px\",\r\n              boxShadow:\r\n                \"inset 100px 0px 100px -50px rgb(170, 170, 170), inset -100px 0px 100px -50px rgb(170, 170, 170)\",\r\n              textAlign: \"center\",\r\n              verticalAlign: \"middle\",\r\n            }}\r\n          >\r\n            <b style={{ fontSize: \"22px\", fontFamily: \"cursive\" }}>\r\n              {country.name}\r\n            </b>{\" \"}\r\n            Overview\r\n          </p>\r\n        </div>\r\n        <div className=\"datalayout__overview_in\">\r\n          <div\r\n            className=\"datalayout__overview_box\"\r\n            style={{ borderLeft: \"hidden\" }}\r\n          >\r\n            <p className=\"datalayout__overview_title\">\r\n              Cases <br />\r\n              <span className=\"datalayout__overview_boldnumber\">\r\n                {nFormatter(country.cases)}\r\n              </span>{\" \"}\r\n              <br />\r\n              <span className=\"datalayout__overview_dailynumber\">\r\n                + {nf.format(country.todayCases)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"datalayout__overview_box\">\r\n            <p className=\"datalayout__overview_title\">\r\n              Recovered <br />\r\n              <span className=\"datalayout__overview_boldnumber\">\r\n                {nFormatter(country.recovered)}\r\n              </span>{\" \"}\r\n              <br />\r\n              <span className=\"datalayout__overview_dailynumber\">\r\n                + {nf.format(country.todayRecovered)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"datalayout__overview_box\">\r\n            <p className=\"datalayout__overview_title\">\r\n              Deaths <br />\r\n              <span className=\"datalayout__overview_boldnumber\">\r\n                {nFormatter(country.deaths)}\r\n              </span>{\" \"}\r\n              <br />\r\n              <span className=\"datalayout__overview_dailynumber\">\r\n                + {nf.format(country.todayDeaths)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"datalayout__overview_in\">\r\n          <div\r\n            className=\"datalayout__overview_box\"\r\n            style={{ borderLeft: \"hidden\" }}\r\n          >\r\n            <p className=\"datalayout__overview_title\">\r\n              Active <br />{\" \"}\r\n              <span className=\"datalayout__overview_number\">\r\n                {nFormatter(country.active)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"datalayout__overview_box\">\r\n            <p className=\"datalayout__overview_title\">\r\n              Critical <br />{\" \"}\r\n              <span className=\"datalayout__overview_number\">\r\n                {nFormatter(country.critical)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"datalayout__overview_box\">\r\n            <p className=\"datalayout__overview_title\">\r\n              Tests <br />{\" \"}\r\n              <span className=\"datalayout__overview_number\">\r\n                {nFormatter(country.tests)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"datalayout__overview_in\">\r\n          <div\r\n            className=\"datalayout__overview_box\"\r\n            style={{ borderLeft: \"hidden\" }}\r\n          >\r\n            <p className=\"datalayout__overview_title\">\r\n              Case/Person <br />{\" \"}\r\n              <span className=\"datalayout__overview_number\">\r\n                {nFormatter(country.casePerPerson)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"datalayout__overview_box\">\r\n            <p className=\"datalayout__overview_title\">\r\n              Test/Person <br />{\" \"}\r\n              <span className=\"datalayout__overview_number\">\r\n                {nFormatter(country.testPerPerson)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className=\"datalayout__overview_box\">\r\n            <p className=\"datalayout__overview_title\">\r\n              Deaths/Person <br />{\" \"}\r\n              <span className=\"datalayout__overview_number\">\r\n                {nFormatter(country.deathPerPerson)}\r\n              </span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <p\r\n          style={{ paddingLeft: \"8px\", paddingBottom: \"2px\", fontSize: \"10px\" }}\r\n        >\r\n          <b>Case/Person</b> = <b>X</b> (Every <b>X</b> people there's one Case\r\n          )\r\n        </p>\r\n      </div>\r\n      <div className=\"datalayout__table\">\r\n        <Table\r\n          countries={countries}\r\n          country={country}\r\n          setSortType={setSortType}\r\n          sortType={sortType}\r\n          setDataShowing={setDataShowing}\r\n          dataShowing={dataShowing}\r\n        />\r\n      </div>\r\n      {/* <div className=\"datalayout__graph_pie\">\r\n        <PieChart countries={countries} casesType={casesType} />\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DataLayout;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  LoadScript,\r\n  Circle,\r\n  InfoWindow,\r\n} from \"@react-google-maps/api\";\r\n\r\nconst containerStyle = {\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n};\r\n\r\nfunction CircleComponent({\r\n  setShowingInfoWindow,\r\n  setCurrentCountry,\r\n  country,\r\n  currentZoom,\r\n  casesType,\r\n  onClose,\r\n}) {\r\n  if (country.name === \"WorldWide\") {\r\n    return null;\r\n  }\r\n\r\n  const options = {\r\n    casesOptions: {\r\n      strokeColor: \"rgba(255, 0, 0)\",\r\n      strokeWeight: 0.5,\r\n      fillColor: \"rgba(255, 0, 0)\",\r\n      fillOpacity: 0.35,\r\n      clickable: true,\r\n      draggable: false,\r\n      editable: false,\r\n      visible: true,\r\n      zIndex: 1,\r\n    },\r\n    recoveredOptions: {\r\n      strokeColor: \"rgba(0, 255, 150)\",\r\n      strokeWeight: 1.5,\r\n      fillColor: \"rgba(0, 255, 0)\",\r\n      fillOpacity: 0.35,\r\n      clickable: true,\r\n      draggable: false,\r\n      editable: false,\r\n      visible: true,\r\n      zIndex: 1,\r\n    },\r\n    deathsOptions: {\r\n      strokeColor: \"rgba(70, 70, 70)\",\r\n      strokeWeight: 1.5,\r\n      fillColor: \"rgba(100, 100, 100)\",\r\n      fillOpacity: 0.35,\r\n      clickable: true,\r\n      draggable: false,\r\n      editable: false,\r\n      visible: true,\r\n      zIndex: 1,\r\n    },\r\n  };\r\n\r\n  const onCircleClick = () => {\r\n    setCurrentCountry(country);\r\n    setShowingInfoWindow(true);\r\n  };\r\n\r\n  const selectedOptions =\r\n    casesType === \"cases\"\r\n      ? options.casesOptions\r\n      : casesType === \"deaths\"\r\n      ? options.deathsOptions\r\n      : options.recoveredOptions;\r\n\r\n  const selectedType =\r\n    casesType === \"cases\"\r\n      ? country.cases\r\n      : casesType === \"recovered\"\r\n      ? country.recovered\r\n      : country.deaths;\r\n\r\n  return (\r\n    <Circle\r\n      center={country.center}\r\n      options={selectedOptions}\r\n      radius={(Math.sqrt(selectedType) * 1000) / currentZoom}\r\n      onMouseOver={onCircleClick}\r\n      onMouseOut={onClose}\r\n      clickable\r\n    />\r\n  );\r\n}\r\n\r\nfunction Maps(props) {\r\n  const [showingInfoWindow, setShowingInfoWindow] = useState(false);\r\n  const [currentCountry, setCurrentCountry] = useState(props.country);\r\n  const [currentZoom, setCurrentZoom] = useState();\r\n\r\n  function handleZoomChanged() {\r\n    setCurrentZoom(this.getZoom() + 1);\r\n  }\r\n\r\n  const onClose = () => {\r\n    showingInfoWindow && setShowingInfoWindow(false);\r\n  };\r\n\r\n  const nf = new Intl.NumberFormat();\r\n\r\n  return (\r\n    //googleMapsApiKey=\"AIzaSyCMRjHwAlEnUxC9Qg8caRtTnkWKHvzj1wI\"\r\n    <LoadScript\r\n      googleMapsApiKey=\"AIzaSyA0qwEl7BqF71zcbmOvKq67ZgmPJNB47AM\"\r\n      googleMapsClientId=\"b16c2d548c77ab9e\"\r\n    >\r\n      <GoogleMap\r\n        mapContainerStyle={containerStyle}\r\n        center={props.country.center}\r\n        zoom={props.country.zoom}\r\n        onZoomChanged={handleZoomChanged}\r\n        options={{\r\n          // gestureHandling: \"greedy\",\r\n          streetViewControl: false,\r\n          mapTypeControl: false,\r\n          maxZoom: 6,\r\n          minZoom: 1,\r\n        }}\r\n      >\r\n        <>\r\n          {props.countries.map((country) => (\r\n            <CircleComponent\r\n              setShowingInfoWindow={setShowingInfoWindow}\r\n              setCurrentCountry={setCurrentCountry}\r\n              country={country}\r\n              key={country.name}\r\n              showingInfoWindow={showingInfoWindow}\r\n              currentZoom={currentZoom}\r\n              casesType={props.casesType}\r\n              onClose={onClose}\r\n            />\r\n          ))}\r\n\r\n          {showingInfoWindow && (\r\n            <InfoWindow position={currentCountry.center} onCloseClick={onClose}>\r\n              <div>\r\n                <span>\r\n                  <img\r\n                    alt={`${currentCountry.name} Flag`}\r\n                    src={currentCountry.flag}\r\n                    className=\"map_image\"\r\n                  />\r\n                </span>\r\n                <br />\r\n                <span>{`${currentCountry.name}`}</span>\r\n                <br />\r\n                <span>{`Cases: ${nf.format(currentCountry.cases)}`}</span>\r\n                <br />\r\n                <span>{`Recovered: ${nf.format(\r\n                  currentCountry.recovered\r\n                )}`}</span>\r\n                <br />\r\n                <span>{`Deaths: ${nf.format(currentCountry.deaths)}`}</span>\r\n              </div>\r\n            </InfoWindow>\r\n          )}\r\n        </>\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  );\r\n}\r\n\r\nexport default React.memo(Maps);\r\n","import React from \"react\";\r\n\r\nimport Maps from \"./GoogleMap.js\";\r\n\r\nfunction Map(props) {\r\n  const color =\r\n    props.casesType === \"cases\"\r\n      ? \"rgba(200, 20, 50, 0.5)\"\r\n      : props.casesType === \"recovered\"\r\n      ? \"rgba(0, 200, 50, 0.5)\"\r\n      : \"rgba(100, 100, 100, 0.5)\";\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", height: \"100%\", width: \"100%\" }}>\r\n      <div\r\n        style={{\r\n          padding: \"3px\",\r\n          // borderBottom: \"1px solid rgb(180, 180, 180)\",\r\n        }}\r\n      >\r\n        <p style={{ display: \"inline\" }}>Map of </p>\r\n        <h3 style={{ display: \"inline\", color: color }}>{props.casesType}</h3>\r\n      </div>\r\n      <div\r\n        style={{ position: \"relative\", height: \"250px\", width: \"100%\" }}\r\n      >\r\n        <Maps\r\n          countries={props.countries}\r\n          country={props.country}\r\n          casesType={props.casesType}\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <p\r\n          style={{\r\n            fontSize: \"13px\",\r\n            color: \"gray\",\r\n            paddingLeft: \"10px\",\r\n            display: \"inline\",\r\n            position: \"relative\",\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          Source:\r\n        </p>\r\n        <a\r\n          href=\"https://www.worldometers.info/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          style={{ color: \"gray\", display: \"inline\", fontSize: \"10px\" }}\r\n        >\r\n          Worldometer\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\n\r\nimport \"../Styling/Footer.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p>\r\n        Contact me:{\" \"}\r\n        <a href=\"mailto: adham@adhamnasr.com\">adham@adhamnasr.com</a>\r\n      </p>\r\n      <p style={{ fontSize: \"12px\" }}>Copyright&copy; 2020</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./Styling/App.css\";\n\nimport Header from \"./Components/Header/Header.js\";\nimport LineGraph from \"./Components/LineGraph\";\nimport pic from \"./Images/earth.jpg\";\nimport Slider from \"./Components/Slider.js\";\nimport DataLayout from \"./Components/DataLayout\";\nimport Map from \"./Components/Map\";\nimport Footer from \"./Components/Footer\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState({});\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [sortType, setSortType] = useState(\"\");\n  const [graphSlider, setGraphSlider] = useState({ value: \"200\" });\n  const [graphsliderMax, setGraphSliderMax] = useState(\"300\");\n  const [dataShowing, setDataShowing] = useState(\"all\"); //map today/all\n\n  useEffect(() => {\n    const sortData = (data) => {\n      const sortedData = [...data];\n\n      return sortType === \"cases\"\n        ? sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1))\n        : sortType === \"deaths\"\n        ? sortedData.sort((a, b) => (a.deaths > b.deaths ? -1 : 1))\n        : sortType === \"recovered\"\n        ? sortedData.sort((a, b) => (a.recovered > b.recovered ? -1 : 1))\n        : sortType === \"todayCases\"\n        ? sortedData.sort((a, b) => (a.todayCases > b.todayCases ? -1 : 1))\n        : sortType === \"todayDeaths\"\n        ? sortedData.sort((a, b) => (a.todayDeaths > b.todayDeaths ? -1 : 1))\n        : sortType === \"todayRecovered\"\n        ? sortedData.sort((a, b) =>\n            a.todayRecovered > b.todayRecovered ? -1 : 1\n          )\n        : sortType === \"active\"\n        ? sortedData.sort((a, b) => (a.active > b.active ? -1 : 1))\n        : sortType === \"countries\"\n        ? sortedData.sort((a, b) => (a.name < b.name ? -1 : 1))\n        : sortedData.sort((a, b) => (a > b ? -1 : 1));\n    };\n    const sorted = sortData(countries);\n    setCountries(sorted);\n  }, [sortType]);\n\n  const onChange = (event) => {\n    const { value } = event.target;\n    let countryS = countries.find((c) => c.name === value);\n\n    if (countryS !== undefined) {\n      setCountry(countryS);\n    }\n  };\n\n  useEffect(() => {\n    const selectedCountry = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/all?yesterday=true\")\n        .then((response) => response.json())\n        .then((data) => {\n          const worldwide = data;\n          worldwide.name = \"WorldWide\";\n          worldwide.flag = pic;\n          worldwide.center = {\n            lat: 0,\n            lng: 0,\n          };\n          worldwide.zoom = 1;\n          worldwide.casePerPerson = data.population / data.cases;\n          worldwide.testPerPerson = data.population / data.tests;\n          worldwide.deathPerPerson = data.population / data.deaths;\n          worldwide.timeline = null;\n          // worldwide.todayUpdated = 0;\n          setCountries((countries) => countries.concat(worldwide));\n          setCountry(worldwide);\n        });\n    };\n    selectedCountry();\n  }, []);\n\n  useEffect(() => {\n    const selectedCountry = async () => {\n      await fetch(`https://disease.sh/v3/covid-19/countries?yesterday=true`)\n        .then((response) => response.json())\n        .then((data) => {\n          const countriesS = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n            cases: country.cases,\n            todayCases: country.todayCases,\n            recovered: country.recovered,\n            todayRecovered: country.todayRecovered,\n            deaths: country.deaths,\n            todayDeaths: country.todayDeaths,\n            flag: country.countryInfo.flag,\n            center: {\n              lat: country.countryInfo.lat,\n              lng: country.countryInfo.long,\n            },\n            zoom: 4,\n            active: country.active,\n            critical: country.critical,\n            tests: country.tests,\n            casePerPerson: country.oneCasePerPeople,\n            testPerPerson: country.oneTestPerPeople,\n            deathPerPerson: country.oneDeathPerPeople,\n            timeline: null,\n            // todayUpdated: 0,\n          }));\n          setCountries((countries) => countries.concat(countriesS));\n        });\n    };\n    selectedCountry();\n  }, []);\n\n  // useEffect(() => {\n  //   const selectedCountry = async () => {\n  //     await fetch(\"https://disease.sh/v3/covid-19/all?yesterday=false\")\n  //       .then((response) => response.json())\n  //       .then((data) => {\n  //         const index = countries.findIndex((e, index) => {\n  //           return e.name === \"WorldWide\";\n  //         });\n  //         if (countries[index] !== -1 && countries.length > 1) {\n  //           countries[index] = {\n  //             ...countries[index], //spread notation for the selected object\n  //             todayUpdated: data.todayCases,\n  //           };\n  //           setCountries(countries);\n  //         }\n  //       });\n  //   };\n  //   selectedCountry();\n  // }, [country]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__header\">\n        <Header\n          countries={countries}\n          changeCountry={onChange}\n          country={country}\n          casesType={casesType}\n          setCasesType={setCasesType}\n          setDataShowing={setDataShowing}\n          setGraphSlider={setGraphSlider}\n          setSortType={setSortType}\n          setCountry={setCountry}\n        />\n      </div>\n      <div className=\"app__body\">\n        <div className=\"app__dataLayout\">\n          <DataLayout\n            country={country}\n            countries={countries}\n            casesType={casesType}\n            setSortType={setSortType}\n            sortType={sortType}\n            dataShowing={dataShowing}\n            setDataShowing={setDataShowing}\n          />\n        </div>\n        <div className=\"app__map_wrapper\">\n          <Map countries={countries} country={country} casesType={casesType} />\n        </div>\n        <div className=\"app__graph\">\n          <div className=\"app__graph_graph\">\n            <LineGraph\n              casesType={casesType}\n              country={country}\n              setCountry={setCountry}\n              graphSlider={graphSlider}\n              setGraphSlider={setGraphSlider}\n              setSliderMax={setGraphSliderMax}\n            />\n          </div>\n          <Slider\n            graphSlider={graphSlider}\n            setGraphSlider={setGraphSlider}\n            sliderMax={graphsliderMax}\n          />\n        </div>\n      </div>\n      <div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// Click on title reset the app\n//search country sticky\n// Graph on hover show not only cases, But also recoverd and deathsnpm (u have to save deaths and recovered with the array in cache so u can have access)\n// After user zoom out, if different country selected from dropdown, map doesn't zoom back to it. Check the setZoom on country change\n// When a country is selected table scrolls to that country and highlights raw\n// Title style \"Covid 19 Tracker\"\n// Check out why the map circles load twice when deaths selected. Maybe cuz \"cases\" is set to default\n\n// const isMobile = useWindowSize();\n// console.log(isMobile);\n\n// function useWindowSize() {\n//   // Initialize state with undefined width/height so server and client renders match\n//   // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n//   const [windowSize, setWindowSize] = useState({\n//     width: undefined,\n//     height: undefined,\n//   });\n\n//   useEffect(() => {\n//     // Handler to call on window resize\n//     function handleResize() {\n//       // Set window width/height to state\n//       setWindowSize({\n//         width: window.innerWidth,\n//         height: window.innerHeight,\n//       });\n//     }\n\n//     // Add event listener\n//     window.addEventListener(\"resize\", handleResize);\n\n//     // Call handler right away so state gets updated with initial window size\n//     handleResize();\n\n//     // Remove event listener on cleanup\n//     return () => window.removeEventListener(\"resize\", handleResize);\n//   }, []); // Empty array ensures that effect is only run on mount\n\n//   return windowSize;\n// }\n\n//http://adham-123.github.io/covid-tracker\n"],"sourceRoot":""}